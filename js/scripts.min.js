(function(t, e) {
    if (typeof define === "function" && define.amd) {
        define(e);
    } else if (typeof exports === "object") {
        module.exports = e(require, exports, module);
    } else {
        t.Tether = e();
    }
})(this, function(t, e, n) {
    "use strict";
    var i = function() {
        function t(t, e) {
            for (var n = 0; n < e.length; n++) {
                var i = e[n];
                i.enumerable = i.enumerable || false;
                i.configurable = true;
                if ("value" in i) i.writable = true;
                Object.defineProperty(t, i.key, i);
            }
        }
        return function(e, n, i) {
            if (n) t(e.prototype, n);
            if (i) t(e, i);
            return e;
        };
    }();
    function r(t, e) {
        if (!(t instanceof e)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    var o = undefined;
    if (typeof o === "undefined") {
        o = {
            modules: []
        };
    }
    var s = null;
    function a(t) {
        var e = t.getBoundingClientRect();
        var n = {};
        for (var i in e) {
            n[i] = e[i];
        }
        if (t.ownerDocument !== document) {
            var r = t.ownerDocument.defaultView.frameElement;
            if (r) {
                var o = a(r);
                n.top += o.top;
                n.bottom += o.top;
                n.left += o.left;
                n.right += o.left;
            }
        }
        return n;
    }
    function l(t) {
        var e = getComputedStyle(t) || {};
        var n = e.position;
        var i = [];
        if (n === "fixed") {
            return [ t ];
        }
        var r = t;
        while ((r = r.parentNode) && r && r.nodeType === 1) {
            var o = undefined;
            try {
                o = getComputedStyle(r);
            } catch (t) {}
            if (typeof o === "undefined" || o === null) {
                i.push(r);
                return i;
            }
            var s = o;
            var a = s.overflow;
            var l = s.overflowX;
            var f = s.overflowY;
            if (/(auto|scroll)/.test(a + f + l)) {
                if (n !== "absolute" || [ "relative", "absolute", "fixed" ].indexOf(o.position) >= 0) {
                    i.push(r);
                }
            }
        }
        i.push(t.ownerDocument.body);
        if (t.ownerDocument !== document) {
            i.push(t.ownerDocument.defaultView);
        }
        return i;
    }
    var f = function() {
        var t = 0;
        return function() {
            return ++t;
        };
    }();
    var u = {};
    var h = function t() {
        var e = s;
        if (!e || !document.body.contains(e)) {
            e = document.createElement("div");
            e.setAttribute("data-tether-id", f());
            m(e.style, {
                top: 0,
                left: 0,
                position: "absolute"
            });
            document.body.appendChild(e);
            s = e;
        }
        var n = e.getAttribute("data-tether-id");
        if (typeof u[n] === "undefined") {
            u[n] = a(e);
            O(function() {
                delete u[n];
            });
        }
        return u[n];
    };
    function c() {
        if (s) {
            document.body.removeChild(s);
        }
        s = null;
    }
    function d(t) {
        var e = undefined;
        if (t === document) {
            e = document;
            t = document.documentElement;
        } else {
            e = t.ownerDocument;
        }
        var n = e.documentElement;
        var i = a(t);
        var r = h();
        i.top -= r.top;
        i.left -= r.left;
        if (typeof i.width === "undefined") {
            i.width = document.body.scrollWidth - i.left - i.right;
        }
        if (typeof i.height === "undefined") {
            i.height = document.body.scrollHeight - i.top - i.bottom;
        }
        i.top = i.top - n.clientTop;
        i.left = i.left - n.clientLeft;
        i.right = e.body.clientWidth - i.width - i.left;
        i.bottom = e.body.clientHeight - i.height - i.top;
        return i;
    }
    function p(t) {
        return t.offsetParent || document.documentElement;
    }
    var v = null;
    function g() {
        if (v) {
            return v;
        }
        var t = document.createElement("div");
        t.style.width = "100%";
        t.style.height = "200px";
        var e = document.createElement("div");
        m(e.style, {
            position: "absolute",
            top: 0,
            left: 0,
            pointerEvents: "none",
            visibility: "hidden",
            width: "200px",
            height: "150px",
            overflow: "hidden"
        });
        e.appendChild(t);
        document.body.appendChild(e);
        var n = t.offsetWidth;
        e.style.overflow = "scroll";
        var i = t.offsetWidth;
        if (n === i) {
            i = e.clientWidth;
        }
        document.body.removeChild(e);
        var r = n - i;
        v = {
            width: r,
            height: r
        };
        return v;
    }
    function m() {
        var t = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        var e = [];
        Array.prototype.push.apply(e, arguments);
        e.slice(1).forEach(function(e) {
            if (e) {
                for (var n in e) {
                    if ({}.hasOwnProperty.call(e, n)) {
                        t[n] = e[n];
                    }
                }
            }
        });
        return t;
    }
    function _(t, e) {
        if (typeof t.classList !== "undefined") {
            e.split(" ").forEach(function(e) {
                if (e.trim()) {
                    t.classList.remove(e);
                }
            });
        } else {
            var n = new RegExp("(^| )" + e.split(" ").join("|") + "( |$)", "gi");
            var i = T(t).replace(n, " ");
            C(t, i);
        }
    }
    function y(t, e) {
        if (typeof t.classList !== "undefined") {
            e.split(" ").forEach(function(e) {
                if (e.trim()) {
                    t.classList.add(e);
                }
            });
        } else {
            _(t, e);
            var n = T(t) + (" " + e);
            C(t, n);
        }
    }
    function E(t, e) {
        if (typeof t.classList !== "undefined") {
            return t.classList.contains(e);
        }
        var n = T(t);
        return new RegExp("(^| )" + e + "( |$)", "gi").test(n);
    }
    function T(t) {
        if (t.className instanceof t.ownerDocument.defaultView.SVGAnimatedString) {
            return t.className.baseVal;
        }
        return t.className;
    }
    function C(t, e) {
        t.setAttribute("class", e);
    }
    function b(t, e, n) {
        n.forEach(function(n) {
            if (e.indexOf(n) === -1 && E(t, n)) {
                _(t, n);
            }
        });
        e.forEach(function(e) {
            if (!E(t, e)) {
                y(t, e);
            }
        });
    }
    var A = [];
    var O = function t(e) {
        A.push(e);
    };
    var I = function t() {
        var e = undefined;
        while (e = A.pop()) {
            e();
        }
    };
    var w = function() {
        function t() {
            r(this, t);
        }
        i(t, [ {
            key: "on",
            value: function t(e, n, i) {
                var r = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
                if (typeof this.bindings === "undefined") {
                    this.bindings = {};
                }
                if (typeof this.bindings[e] === "undefined") {
                    this.bindings[e] = [];
                }
                this.bindings[e].push({
                    handler: n,
                    ctx: i,
                    once: r
                });
            }
        }, {
            key: "once",
            value: function t(e, n, i) {
                this.on(e, n, i, true);
            }
        }, {
            key: "off",
            value: function t(e, n) {
                if (typeof this.bindings === "undefined" || typeof this.bindings[e] === "undefined") {
                    return;
                }
                if (typeof n === "undefined") {
                    delete this.bindings[e];
                } else {
                    var i = 0;
                    while (i < this.bindings[e].length) {
                        if (this.bindings[e][i].handler === n) {
                            this.bindings[e].splice(i, 1);
                        } else {
                            ++i;
                        }
                    }
                }
            }
        }, {
            key: "trigger",
            value: function t(e) {
                if (typeof this.bindings !== "undefined" && this.bindings[e]) {
                    var n = 0;
                    for (var i = arguments.length, r = Array(i > 1 ? i - 1 : 0), o = 1; o < i; o++) {
                        r[o - 1] = arguments[o];
                    }
                    while (n < this.bindings[e].length) {
                        var s = this.bindings[e][n];
                        var a = s.handler;
                        var l = s.ctx;
                        var f = s.once;
                        var u = l;
                        if (typeof u === "undefined") {
                            u = this;
                        }
                        a.apply(u, r);
                        if (f) {
                            this.bindings[e].splice(n, 1);
                        } else {
                            ++n;
                        }
                    }
                }
            }
        } ]);
        return t;
    }();
    o.Utils = {
        getActualBoundingClientRect: a,
        getScrollParents: l,
        getBounds: d,
        getOffsetParent: p,
        extend: m,
        addClass: y,
        removeClass: _,
        hasClass: E,
        updateClasses: b,
        defer: O,
        flush: I,
        uniqueId: f,
        Evented: w,
        getScrollBarSize: g,
        removeUtilElements: c
    };
    "use strict";
    var S = function() {
        function t(t, e) {
            var n = [];
            var i = true;
            var r = false;
            var o = undefined;
            try {
                for (var s = t[Symbol.iterator](), a; !(i = (a = s.next()).done); i = true) {
                    n.push(a.value);
                    if (e && n.length === e) break;
                }
            } catch (t) {
                r = true;
                o = t;
            } finally {
                try {
                    if (!i && s["return"]) s["return"]();
                } finally {
                    if (r) throw o;
                }
            }
            return n;
        }
        return function(e, n) {
            if (Array.isArray(e)) {
                return e;
            } else if (Symbol.iterator in Object(e)) {
                return t(e, n);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();
    var i = function() {
        function t(t, e) {
            for (var n = 0; n < e.length; n++) {
                var i = e[n];
                i.enumerable = i.enumerable || false;
                i.configurable = true;
                if ("value" in i) i.writable = true;
                Object.defineProperty(t, i.key, i);
            }
        }
        return function(e, n, i) {
            if (n) t(e.prototype, n);
            if (i) t(e, i);
            return e;
        };
    }();
    var D = function t(e, n, i) {
        var r = true;
        t: while (r) {
            var o = e, s = n, a = i;
            r = false;
            if (o === null) o = Function.prototype;
            var l = Object.getOwnPropertyDescriptor(o, s);
            if (l === undefined) {
                var f = Object.getPrototypeOf(o);
                if (f === null) {
                    return undefined;
                } else {
                    e = f;
                    n = s;
                    i = a;
                    r = true;
                    l = f = undefined;
                    continue t;
                }
            } else if ("value" in l) {
                return l.value;
            } else {
                var u = l.get;
                if (u === undefined) {
                    return undefined;
                }
                return u.call(a);
            }
        }
    };
    function r(t, e) {
        if (!(t instanceof e)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    function N(t, e) {
        if (typeof e !== "function" && e !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        }
        t.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: t,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (e) Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e;
    }
    if (typeof o === "undefined") {
        throw new Error("You must include the utils.js file before tether.js");
    }
    var L = o.Utils;
    var l = L.getScrollParents;
    var d = L.getBounds;
    var p = L.getOffsetParent;
    var m = L.extend;
    var y = L.addClass;
    var _ = L.removeClass;
    var b = L.updateClasses;
    var O = L.defer;
    var I = L.flush;
    var g = L.getScrollBarSize;
    var c = L.removeUtilElements;
    function P(t, e) {
        var n = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];
        return t + n >= e && e >= t - n;
    }
    var k = function() {
        if (typeof document === "undefined") {
            return "";
        }
        var t = document.createElement("div");
        var e = [ "transform", "WebkitTransform", "OTransform", "MozTransform", "msTransform" ];
        for (var n = 0; n < e.length; ++n) {
            var i = e[n];
            if (t.style[i] !== undefined) {
                return i;
            }
        }
    }();
    var H = [];
    var W = function t() {
        H.forEach(function(t) {
            t.position(false);
        });
        I();
    };
    function M() {
        if (typeof performance !== "undefined" && typeof performance.now !== "undefined") {
            return performance.now();
        }
        return +new Date();
    }
    (function() {
        var t = null;
        var e = null;
        var n = null;
        var i = function i() {
            if (typeof e !== "undefined" && e > 16) {
                e = Math.min(e - 16, 250);
                n = setTimeout(i, 250);
                return;
            }
            if (typeof t !== "undefined" && M() - t < 10) {
                return;
            }
            if (n != null) {
                clearTimeout(n);
                n = null;
            }
            t = M();
            W();
            e = M() - t;
        };
        if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined") {
            [ "resize", "scroll", "touchmove" ].forEach(function(t) {
                window.addEventListener(t, i);
            });
        }
    })();
    var x = {
        center: "center",
        left: "right",
        right: "left"
    };
    var R = {
        middle: "middle",
        top: "bottom",
        bottom: "top"
    };
    var V = {
        top: 0,
        left: 0,
        middle: "50%",
        center: "50%",
        bottom: "100%",
        right: "100%"
    };
    var j = function t(e, n) {
        var i = e.left;
        var r = e.top;
        if (i === "auto") {
            i = x[n.left];
        }
        if (r === "auto") {
            r = R[n.top];
        }
        return {
            left: i,
            top: r
        };
    };
    var B = function t(e) {
        var n = e.left;
        var i = e.top;
        if (typeof V[e.left] !== "undefined") {
            n = V[e.left];
        }
        if (typeof V[e.top] !== "undefined") {
            i = V[e.top];
        }
        return {
            left: n,
            top: i
        };
    };
    function F() {
        var t = {
            top: 0,
            left: 0
        };
        for (var e = arguments.length, n = Array(e), i = 0; i < e; i++) {
            n[i] = arguments[i];
        }
        n.forEach(function(e) {
            var n = e.top;
            var i = e.left;
            if (typeof n === "string") {
                n = parseFloat(n, 10);
            }
            if (typeof i === "string") {
                i = parseFloat(i, 10);
            }
            t.top += n;
            t.left += i;
        });
        return t;
    }
    function U(t, e) {
        if (typeof t.left === "string" && t.left.indexOf("%") !== -1) {
            t.left = parseFloat(t.left, 10) / 100 * e.width;
        }
        if (typeof t.top === "string" && t.top.indexOf("%") !== -1) {
            t.top = parseFloat(t.top, 10) / 100 * e.height;
        }
        return t;
    }
    var Q = function t(e) {
        var n = e.split(" ");
        var i = S(n, 2);
        var r = i[0];
        var o = i[1];
        return {
            top: r,
            left: o
        };
    };
    var K = Q;
    var G = function(t) {
        N(e, t);
        function e(t) {
            var n = this;
            r(this, e);
            D(Object.getPrototypeOf(e.prototype), "constructor", this).call(this);
            this.position = this.position.bind(this);
            H.push(this);
            this.history = [];
            this.setOptions(t, false);
            o.modules.forEach(function(t) {
                if (typeof t.initialize !== "undefined") {
                    t.initialize.call(n);
                }
            });
            this.position();
        }
        i(e, [ {
            key: "getClass",
            value: function t() {
                var e = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
                var n = this.options.classes;
                if (typeof n !== "undefined" && n[e]) {
                    return this.options.classes[e];
                } else if (this.options.classPrefix) {
                    return this.options.classPrefix + "-" + e;
                } else {
                    return e;
                }
            }
        }, {
            key: "setOptions",
            value: function t(e) {
                var n = this;
                var i = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
                var r = {
                    offset: "0 0",
                    targetOffset: "0 0",
                    targetAttachment: "auto auto",
                    classPrefix: "tether"
                };
                this.options = m(r, e);
                var o = this.options;
                var s = o.element;
                var a = o.target;
                var f = o.targetModifier;
                this.element = s;
                this.target = a;
                this.targetModifier = f;
                if (this.target === "viewport") {
                    this.target = document.body;
                    this.targetModifier = "visible";
                } else if (this.target === "scroll-handle") {
                    this.target = document.body;
                    this.targetModifier = "scroll-handle";
                }
                [ "element", "target" ].forEach(function(t) {
                    if (typeof n[t] === "undefined") {
                        throw new Error("Tether Error: Both element and target must be defined");
                    }
                    if (typeof n[t].jquery !== "undefined") {
                        n[t] = n[t][0];
                    } else if (typeof n[t] === "string") {
                        n[t] = document.querySelector(n[t]);
                    }
                });
                y(this.element, this.getClass("element"));
                if (!(this.options.addTargetClasses === false)) {
                    y(this.target, this.getClass("target"));
                }
                if (!this.options.attachment) {
                    throw new Error("Tether Error: You must provide an attachment");
                }
                this.targetAttachment = K(this.options.targetAttachment);
                this.attachment = K(this.options.attachment);
                this.offset = Q(this.options.offset);
                this.targetOffset = Q(this.options.targetOffset);
                if (typeof this.scrollParents !== "undefined") {
                    this.disable();
                }
                if (this.targetModifier === "scroll-handle") {
                    this.scrollParents = [ this.target ];
                } else {
                    this.scrollParents = l(this.target);
                }
                if (!(this.options.enabled === false)) {
                    this.enable(i);
                }
            }
        }, {
            key: "getTargetBounds",
            value: function t() {
                if (typeof this.targetModifier !== "undefined") {
                    if (this.targetModifier === "visible") {
                        if (this.target === document.body) {
                            return {
                                top: pageYOffset,
                                left: pageXOffset,
                                height: innerHeight,
                                width: innerWidth
                            };
                        } else {
                            var e = d(this.target);
                            var n = {
                                height: e.height,
                                width: e.width,
                                top: e.top,
                                left: e.left
                            };
                            n.height = Math.min(n.height, e.height - (pageYOffset - e.top));
                            n.height = Math.min(n.height, e.height - (e.top + e.height - (pageYOffset + innerHeight)));
                            n.height = Math.min(innerHeight, n.height);
                            n.height -= 2;
                            n.width = Math.min(n.width, e.width - (pageXOffset - e.left));
                            n.width = Math.min(n.width, e.width - (e.left + e.width - (pageXOffset + innerWidth)));
                            n.width = Math.min(innerWidth, n.width);
                            n.width -= 2;
                            if (n.top < pageYOffset) {
                                n.top = pageYOffset;
                            }
                            if (n.left < pageXOffset) {
                                n.left = pageXOffset;
                            }
                            return n;
                        }
                    } else if (this.targetModifier === "scroll-handle") {
                        var e = undefined;
                        var i = this.target;
                        if (i === document.body) {
                            i = document.documentElement;
                            e = {
                                left: pageXOffset,
                                top: pageYOffset,
                                height: innerHeight,
                                width: innerWidth
                            };
                        } else {
                            e = d(i);
                        }
                        var r = getComputedStyle(i);
                        var o = i.scrollWidth > i.clientWidth || [ r.overflow, r.overflowX ].indexOf("scroll") >= 0 || this.target !== document.body;
                        var s = 0;
                        if (o) {
                            s = 15;
                        }
                        var a = e.height - parseFloat(r.borderTopWidth) - parseFloat(r.borderBottomWidth) - s;
                        var n = {
                            width: 15,
                            height: a * .975 * (a / i.scrollHeight),
                            left: e.left + e.width - parseFloat(r.borderLeftWidth) - 15
                        };
                        var l = 0;
                        if (a < 408 && this.target === document.body) {
                            l = -11e-5 * Math.pow(a, 2) - .00727 * a + 22.58;
                        }
                        if (this.target !== document.body) {
                            n.height = Math.max(n.height, 24);
                        }
                        var f = this.target.scrollTop / (i.scrollHeight - a);
                        n.top = f * (a - n.height - l) + e.top + parseFloat(r.borderTopWidth);
                        if (this.target === document.body) {
                            n.height = Math.max(n.height, 24);
                        }
                        return n;
                    }
                } else {
                    return d(this.target);
                }
            }
        }, {
            key: "clearCache",
            value: function t() {
                this._cache = {};
            }
        }, {
            key: "cache",
            value: function t(e, n) {
                if (typeof this._cache === "undefined") {
                    this._cache = {};
                }
                if (typeof this._cache[e] === "undefined") {
                    this._cache[e] = n.call(this);
                }
                return this._cache[e];
            }
        }, {
            key: "enable",
            value: function t() {
                var e = this;
                var n = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
                if (!(this.options.addTargetClasses === false)) {
                    y(this.target, this.getClass("enabled"));
                }
                y(this.element, this.getClass("enabled"));
                this.enabled = true;
                this.scrollParents.forEach(function(t) {
                    if (t !== e.target.ownerDocument) {
                        t.addEventListener("scroll", e.position);
                    }
                });
                if (n) {
                    this.position();
                }
            }
        }, {
            key: "disable",
            value: function t() {
                var e = this;
                _(this.target, this.getClass("enabled"));
                _(this.element, this.getClass("enabled"));
                this.enabled = false;
                if (typeof this.scrollParents !== "undefined") {
                    this.scrollParents.forEach(function(t) {
                        t.removeEventListener("scroll", e.position);
                    });
                }
            }
        }, {
            key: "destroy",
            value: function t() {
                var e = this;
                this.disable();
                H.forEach(function(t, n) {
                    if (t === e) {
                        H.splice(n, 1);
                    }
                });
                if (H.length === 0) {
                    c();
                }
            }
        }, {
            key: "updateAttachClasses",
            value: function t(e, n) {
                var i = this;
                e = e || this.attachment;
                n = n || this.targetAttachment;
                var r = [ "left", "top", "bottom", "right", "middle", "center" ];
                if (typeof this._addAttachClasses !== "undefined" && this._addAttachClasses.length) {
                    this._addAttachClasses.splice(0, this._addAttachClasses.length);
                }
                if (typeof this._addAttachClasses === "undefined") {
                    this._addAttachClasses = [];
                }
                var o = this._addAttachClasses;
                if (e.top) {
                    o.push(this.getClass("element-attached") + "-" + e.top);
                }
                if (e.left) {
                    o.push(this.getClass("element-attached") + "-" + e.left);
                }
                if (n.top) {
                    o.push(this.getClass("target-attached") + "-" + n.top);
                }
                if (n.left) {
                    o.push(this.getClass("target-attached") + "-" + n.left);
                }
                var s = [];
                r.forEach(function(t) {
                    s.push(i.getClass("element-attached") + "-" + t);
                    s.push(i.getClass("target-attached") + "-" + t);
                });
                O(function() {
                    if (!(typeof i._addAttachClasses !== "undefined")) {
                        return;
                    }
                    b(i.element, i._addAttachClasses, s);
                    if (!(i.options.addTargetClasses === false)) {
                        b(i.target, i._addAttachClasses, s);
                    }
                    delete i._addAttachClasses;
                });
            }
        }, {
            key: "position",
            value: function t() {
                var e = this;
                var n = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
                if (!this.enabled) {
                    return;
                }
                this.clearCache();
                var i = j(this.targetAttachment, this.attachment);
                this.updateAttachClasses(this.attachment, i);
                var r = this.cache("element-bounds", function() {
                    return d(e.element);
                });
                var s = r.width;
                var a = r.height;
                if (s === 0 && a === 0 && typeof this.lastSize !== "undefined") {
                    var l = this.lastSize;
                    s = l.width;
                    a = l.height;
                } else {
                    this.lastSize = {
                        width: s,
                        height: a
                    };
                }
                var f = this.cache("target-bounds", function() {
                    return e.getTargetBounds();
                });
                var u = f;
                var h = U(B(this.attachment), {
                    width: s,
                    height: a
                });
                var c = U(B(i), u);
                var v = U(this.offset, {
                    width: s,
                    height: a
                });
                var m = U(this.targetOffset, u);
                h = F(h, v);
                c = F(c, m);
                var _ = f.left + c.left - h.left;
                var y = f.top + c.top - h.top;
                for (var E = 0; E < o.modules.length; ++E) {
                    var T = o.modules[E];
                    var C = T.position.call(this, {
                        left: _,
                        top: y,
                        targetAttachment: i,
                        targetPos: f,
                        elementPos: r,
                        offset: h,
                        targetOffset: c,
                        manualOffset: v,
                        manualTargetOffset: m,
                        scrollbarSize: w,
                        attachment: this.attachment
                    });
                    if (C === false) {
                        return false;
                    } else if (typeof C === "undefined" || typeof C !== "object") {
                        continue;
                    } else {
                        y = C.top;
                        _ = C.left;
                    }
                }
                var b = {
                    page: {
                        top: y,
                        left: _
                    },
                    viewport: {
                        top: y - pageYOffset,
                        bottom: pageYOffset - y - a + innerHeight,
                        left: _ - pageXOffset,
                        right: pageXOffset - _ - s + innerWidth
                    }
                };
                var A = this.target.ownerDocument;
                var O = A.defaultView;
                var w = undefined;
                if (O.innerHeight > A.documentElement.clientHeight) {
                    w = this.cache("scrollbar-size", g);
                    b.viewport.bottom -= w.height;
                }
                if (O.innerWidth > A.documentElement.clientWidth) {
                    w = this.cache("scrollbar-size", g);
                    b.viewport.right -= w.width;
                }
                if ([ "", "static" ].indexOf(A.body.style.position) === -1 || [ "", "static" ].indexOf(A.body.parentElement.style.position) === -1) {
                    b.page.bottom = A.body.scrollHeight - y - a;
                    b.page.right = A.body.scrollWidth - _ - s;
                }
                if (typeof this.options.optimizations !== "undefined" && this.options.optimizations.moveElement !== false && !(typeof this.targetModifier !== "undefined")) {
                    (function() {
                        var t = e.cache("target-offsetparent", function() {
                            return p(e.target);
                        });
                        var n = e.cache("target-offsetparent-bounds", function() {
                            return d(t);
                        });
                        var i = getComputedStyle(t);
                        var r = n;
                        var o = {};
                        [ "Top", "Left", "Bottom", "Right" ].forEach(function(t) {
                            o[t.toLowerCase()] = parseFloat(i["border" + t + "Width"]);
                        });
                        n.right = A.body.scrollWidth - n.left - r.width + o.right;
                        n.bottom = A.body.scrollHeight - n.top - r.height + o.bottom;
                        if (b.page.top >= n.top + o.top && b.page.bottom >= n.bottom) {
                            if (b.page.left >= n.left + o.left && b.page.right >= n.right) {
                                var s = t.scrollTop;
                                var a = t.scrollLeft;
                                b.offset = {
                                    top: b.page.top - n.top + s - o.top,
                                    left: b.page.left - n.left + a - o.left
                                };
                            }
                        }
                    })();
                }
                this.move(b);
                this.history.unshift(b);
                if (this.history.length > 3) {
                    this.history.pop();
                }
                if (n) {
                    I();
                }
                return true;
            }
        }, {
            key: "move",
            value: function t(e) {
                var n = this;
                if (!(typeof this.element.parentNode !== "undefined")) {
                    return;
                }
                var i = {};
                for (var r in e) {
                    i[r] = {};
                    for (var o in e[r]) {
                        var s = false;
                        for (var a = 0; a < this.history.length; ++a) {
                            var l = this.history[a];
                            if (typeof l[r] !== "undefined" && !P(l[r][o], e[r][o])) {
                                s = true;
                                break;
                            }
                        }
                        if (!s) {
                            i[r][o] = true;
                        }
                    }
                }
                var f = {
                    top: "",
                    left: "",
                    right: "",
                    bottom: ""
                };
                var u = function t(e, i) {
                    var r = typeof n.options.optimizations !== "undefined";
                    var o = r ? n.options.optimizations.gpu : null;
                    if (o !== false) {
                        var s = undefined, a = undefined;
                        if (e.top) {
                            f.top = 0;
                            s = i.top;
                        } else {
                            f.bottom = 0;
                            s = -i.bottom;
                        }
                        if (e.left) {
                            f.left = 0;
                            a = i.left;
                        } else {
                            f.right = 0;
                            a = -i.right;
                        }
                        if (window.matchMedia) {
                            var l = window.matchMedia("only screen and (min-resolution: 1.3dppx)").matches || window.matchMedia("only screen and (-webkit-min-device-pixel-ratio: 1.3)").matches;
                            if (!l) {
                                a = Math.round(a);
                                s = Math.round(s);
                            }
                        }
                        f[k] = "translateX(" + a + "px) translateY(" + s + "px)";
                        if (k !== "msTransform") {
                            f[k] += " translateZ(0)";
                        }
                    } else {
                        if (e.top) {
                            f.top = i.top + "px";
                        } else {
                            f.bottom = i.bottom + "px";
                        }
                        if (e.left) {
                            f.left = i.left + "px";
                        } else {
                            f.right = i.right + "px";
                        }
                    }
                };
                var h = false;
                if ((i.page.top || i.page.bottom) && (i.page.left || i.page.right)) {
                    f.position = "absolute";
                    u(i.page, e.page);
                } else if ((i.viewport.top || i.viewport.bottom) && (i.viewport.left || i.viewport.right)) {
                    f.position = "fixed";
                    u(i.viewport, e.viewport);
                } else if (typeof i.offset !== "undefined" && i.offset.top && i.offset.left) {
                    (function() {
                        f.position = "absolute";
                        var t = n.cache("target-offsetparent", function() {
                            return p(n.target);
                        });
                        if (p(n.element) !== t) {
                            O(function() {
                                n.element.parentNode.removeChild(n.element);
                                t.appendChild(n.element);
                            });
                        }
                        u(i.offset, e.offset);
                        h = true;
                    })();
                } else {
                    f.position = "absolute";
                    u({
                        top: true,
                        left: true
                    }, e.page);
                }
                if (!h) {
                    if (this.options.bodyElement) {
                        this.options.bodyElement.appendChild(this.element);
                    } else {
                        var c = true;
                        var d = this.element.parentNode;
                        while (d && d.nodeType === 1 && d.tagName !== "BODY") {
                            if (getComputedStyle(d).position !== "static") {
                                c = false;
                                break;
                            }
                            d = d.parentNode;
                        }
                        if (!c) {
                            this.element.parentNode.removeChild(this.element);
                            this.element.ownerDocument.body.appendChild(this.element);
                        }
                    }
                }
                var v = {};
                var g = false;
                for (var o in f) {
                    var _ = f[o];
                    var y = this.element.style[o];
                    if (y !== _) {
                        g = true;
                        v[o] = _;
                    }
                }
                if (g) {
                    O(function() {
                        m(n.element.style, v);
                        n.trigger("repositioned");
                    });
                }
            }
        } ]);
        return e;
    }(w);
    G.modules = [];
    o.position = W;
    var Y = m(G, o);
    "use strict";
    var S = function() {
        function t(t, e) {
            var n = [];
            var i = true;
            var r = false;
            var o = undefined;
            try {
                for (var s = t[Symbol.iterator](), a; !(i = (a = s.next()).done); i = true) {
                    n.push(a.value);
                    if (e && n.length === e) break;
                }
            } catch (t) {
                r = true;
                o = t;
            } finally {
                try {
                    if (!i && s["return"]) s["return"]();
                } finally {
                    if (r) throw o;
                }
            }
            return n;
        }
        return function(e, n) {
            if (Array.isArray(e)) {
                return e;
            } else if (Symbol.iterator in Object(e)) {
                return t(e, n);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();
    var L = o.Utils;
    var d = L.getBounds;
    var m = L.extend;
    var b = L.updateClasses;
    var O = L.defer;
    var z = [ "left", "top", "right", "bottom" ];
    function X(t, e) {
        if (e === "scrollParent") {
            e = t.scrollParents[0];
        } else if (e === "window") {
            e = [ pageXOffset, pageYOffset, innerWidth + pageXOffset, innerHeight + pageYOffset ];
        }
        if (e === document) {
            e = e.documentElement;
        }
        if (typeof e.nodeType !== "undefined") {
            (function() {
                var t = e;
                var n = d(e);
                var i = n;
                var r = getComputedStyle(e);
                e = [ i.left, i.top, n.width + i.left, n.height + i.top ];
                if (t.ownerDocument !== document) {
                    var o = t.ownerDocument.defaultView;
                    e[0] += o.pageXOffset;
                    e[1] += o.pageYOffset;
                    e[2] += o.pageXOffset;
                    e[3] += o.pageYOffset;
                }
                z.forEach(function(t, n) {
                    t = t[0].toUpperCase() + t.substr(1);
                    if (t === "Top" || t === "Left") {
                        e[n] += parseFloat(r["border" + t + "Width"]);
                    } else {
                        e[n] -= parseFloat(r["border" + t + "Width"]);
                    }
                });
            })();
        }
        return e;
    }
    o.modules.push({
        position: function t(e) {
            var n = this;
            var i = e.top;
            var r = e.left;
            var o = e.targetAttachment;
            if (!this.options.constraints) {
                return true;
            }
            var s = this.cache("element-bounds", function() {
                return d(n.element);
            });
            var a = s.height;
            var l = s.width;
            if (l === 0 && a === 0 && typeof this.lastSize !== "undefined") {
                var f = this.lastSize;
                l = f.width;
                a = f.height;
            }
            var u = this.cache("target-bounds", function() {
                return n.getTargetBounds();
            });
            var h = u.height;
            var c = u.width;
            var p = [ this.getClass("pinned"), this.getClass("out-of-bounds") ];
            this.options.constraints.forEach(function(t) {
                var e = t.outOfBoundsClass;
                var n = t.pinnedClass;
                if (e) {
                    p.push(e);
                }
                if (n) {
                    p.push(n);
                }
            });
            p.forEach(function(t) {
                [ "left", "top", "right", "bottom" ].forEach(function(e) {
                    p.push(t + "-" + e);
                });
            });
            var v = [];
            var g = m({}, o);
            var _ = m({}, this.attachment);
            this.options.constraints.forEach(function(t) {
                var e = t.to;
                var s = t.attachment;
                var f = t.pin;
                if (typeof s === "undefined") {
                    s = "";
                }
                var u = undefined, d = undefined;
                if (s.indexOf(" ") >= 0) {
                    var p = s.split(" ");
                    var m = S(p, 2);
                    d = m[0];
                    u = m[1];
                } else {
                    u = d = s;
                }
                var y = X(n, e);
                if (d === "target" || d === "both") {
                    if (i < y[1] && g.top === "top") {
                        i += h;
                        g.top = "bottom";
                    }
                    if (i + a > y[3] && g.top === "bottom") {
                        i -= h;
                        g.top = "top";
                    }
                }
                if (d === "together") {
                    if (g.top === "top") {
                        if (_.top === "bottom" && i < y[1]) {
                            i += h;
                            g.top = "bottom";
                            i += a;
                            _.top = "top";
                        } else if (_.top === "top" && i + a > y[3] && i - (a - h) >= y[1]) {
                            i -= a - h;
                            g.top = "bottom";
                            _.top = "bottom";
                        }
                    }
                    if (g.top === "bottom") {
                        if (_.top === "top" && i + a > y[3]) {
                            i -= h;
                            g.top = "top";
                            i -= a;
                            _.top = "bottom";
                        } else if (_.top === "bottom" && i < y[1] && i + (a * 2 - h) <= y[3]) {
                            i += a - h;
                            g.top = "top";
                            _.top = "top";
                        }
                    }
                    if (g.top === "middle") {
                        if (i + a > y[3] && _.top === "top") {
                            i -= a;
                            _.top = "bottom";
                        } else if (i < y[1] && _.top === "bottom") {
                            i += a;
                            _.top = "top";
                        }
                    }
                }
                if (u === "target" || u === "both") {
                    if (r < y[0] && g.left === "left") {
                        r += c;
                        g.left = "right";
                    }
                    if (r + l > y[2] && g.left === "right") {
                        r -= c;
                        g.left = "left";
                    }
                }
                if (u === "together") {
                    if (r < y[0] && g.left === "left") {
                        if (_.left === "right") {
                            r += c;
                            g.left = "right";
                            r += l;
                            _.left = "left";
                        } else if (_.left === "left") {
                            r += c;
                            g.left = "right";
                            r -= l;
                            _.left = "right";
                        }
                    } else if (r + l > y[2] && g.left === "right") {
                        if (_.left === "left") {
                            r -= c;
                            g.left = "left";
                            r -= l;
                            _.left = "right";
                        } else if (_.left === "right") {
                            r -= c;
                            g.left = "left";
                            r += l;
                            _.left = "left";
                        }
                    } else if (g.left === "center") {
                        if (r + l > y[2] && _.left === "left") {
                            r -= l;
                            _.left = "right";
                        } else if (r < y[0] && _.left === "right") {
                            r += l;
                            _.left = "left";
                        }
                    }
                }
                if (d === "element" || d === "both") {
                    if (i < y[1] && _.top === "bottom") {
                        i += a;
                        _.top = "top";
                    }
                    if (i + a > y[3] && _.top === "top") {
                        i -= a;
                        _.top = "bottom";
                    }
                }
                if (u === "element" || u === "both") {
                    if (r < y[0]) {
                        if (_.left === "right") {
                            r += l;
                            _.left = "left";
                        } else if (_.left === "center") {
                            r += l / 2;
                            _.left = "left";
                        }
                    }
                    if (r + l > y[2]) {
                        if (_.left === "left") {
                            r -= l;
                            _.left = "right";
                        } else if (_.left === "center") {
                            r -= l / 2;
                            _.left = "right";
                        }
                    }
                }
                if (typeof f === "string") {
                    f = f.split(",").map(function(t) {
                        return t.trim();
                    });
                } else if (f === true) {
                    f = [ "top", "left", "right", "bottom" ];
                }
                f = f || [];
                var E = [];
                var T = [];
                if (i < y[1]) {
                    if (f.indexOf("top") >= 0) {
                        i = y[1];
                        E.push("top");
                    } else {
                        T.push("top");
                    }
                }
                if (i + a > y[3]) {
                    if (f.indexOf("bottom") >= 0) {
                        i = y[3] - a;
                        E.push("bottom");
                    } else {
                        T.push("bottom");
                    }
                }
                if (r < y[0]) {
                    if (f.indexOf("left") >= 0) {
                        r = y[0];
                        E.push("left");
                    } else {
                        T.push("left");
                    }
                }
                if (r + l > y[2]) {
                    if (f.indexOf("right") >= 0) {
                        r = y[2] - l;
                        E.push("right");
                    } else {
                        T.push("right");
                    }
                }
                if (E.length) {
                    (function() {
                        var t = undefined;
                        if (typeof n.options.pinnedClass !== "undefined") {
                            t = n.options.pinnedClass;
                        } else {
                            t = n.getClass("pinned");
                        }
                        v.push(t);
                        E.forEach(function(e) {
                            v.push(t + "-" + e);
                        });
                    })();
                }
                if (T.length) {
                    (function() {
                        var t = undefined;
                        if (typeof n.options.outOfBoundsClass !== "undefined") {
                            t = n.options.outOfBoundsClass;
                        } else {
                            t = n.getClass("out-of-bounds");
                        }
                        v.push(t);
                        T.forEach(function(e) {
                            v.push(t + "-" + e);
                        });
                    })();
                }
                if (E.indexOf("left") >= 0 || E.indexOf("right") >= 0) {
                    _.left = g.left = false;
                }
                if (E.indexOf("top") >= 0 || E.indexOf("bottom") >= 0) {
                    _.top = g.top = false;
                }
                if (g.top !== o.top || g.left !== o.left || _.top !== n.attachment.top || _.left !== n.attachment.left) {
                    n.updateAttachClasses(_, g);
                    n.trigger("update", {
                        attachment: _,
                        targetAttachment: g
                    });
                }
            });
            O(function() {
                if (!(n.options.addTargetClasses === false)) {
                    b(n.target, v, p);
                }
                b(n.element, v, p);
            });
            return {
                top: i,
                left: r
            };
        }
    });
    "use strict";
    var L = o.Utils;
    var d = L.getBounds;
    var b = L.updateClasses;
    var O = L.defer;
    o.modules.push({
        position: function t(e) {
            var n = this;
            var i = e.top;
            var r = e.left;
            var o = this.cache("element-bounds", function() {
                return d(n.element);
            });
            var s = o.height;
            var a = o.width;
            var l = this.getTargetBounds();
            var f = i + s;
            var u = r + a;
            var h = [];
            if (i <= l.bottom && f >= l.top) {
                [ "left", "right" ].forEach(function(t) {
                    var e = l[t];
                    if (e === r || e === u) {
                        h.push(t);
                    }
                });
            }
            if (r <= l.right && u >= l.left) {
                [ "top", "bottom" ].forEach(function(t) {
                    var e = l[t];
                    if (e === i || e === f) {
                        h.push(t);
                    }
                });
            }
            var c = [];
            var p = [];
            var v = [ "left", "top", "right", "bottom" ];
            c.push(this.getClass("abutted"));
            v.forEach(function(t) {
                c.push(n.getClass("abutted") + "-" + t);
            });
            if (h.length) {
                p.push(this.getClass("abutted"));
            }
            h.forEach(function(t) {
                p.push(n.getClass("abutted") + "-" + t);
            });
            O(function() {
                if (!(n.options.addTargetClasses === false)) {
                    b(n.target, p, c);
                }
                b(n.element, p, c);
            });
            return true;
        }
    });
    "use strict";
    var S = function() {
        function t(t, e) {
            var n = [];
            var i = true;
            var r = false;
            var o = undefined;
            try {
                for (var s = t[Symbol.iterator](), a; !(i = (a = s.next()).done); i = true) {
                    n.push(a.value);
                    if (e && n.length === e) break;
                }
            } catch (t) {
                r = true;
                o = t;
            } finally {
                try {
                    if (!i && s["return"]) s["return"]();
                } finally {
                    if (r) throw o;
                }
            }
            return n;
        }
        return function(e, n) {
            if (Array.isArray(e)) {
                return e;
            } else if (Symbol.iterator in Object(e)) {
                return t(e, n);
            } else {
                throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
        };
    }();
    o.modules.push({
        position: function t(e) {
            var n = e.top;
            var i = e.left;
            if (!this.options.shift) {
                return;
            }
            var r = this.options.shift;
            if (typeof this.options.shift === "function") {
                r = this.options.shift.call(this, {
                    top: n,
                    left: i
                });
            }
            var o = undefined, s = undefined;
            if (typeof r === "string") {
                r = r.split(" ");
                r[1] = r[1] || r[0];
                var a = r;
                var l = S(a, 2);
                o = l[0];
                s = l[1];
                o = parseFloat(o, 10);
                s = parseFloat(s, 10);
            } else {
                o = r.top;
                s = r.left;
            }
            n += o;
            i += s;
            return {
                top: n,
                left: i
            };
        }
    });
    return Y;
});

if (typeof jQuery === "undefined") {
    throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
}

+function(t) {
    var e = t.fn.jquery.split(" ")[0].split(".");
    if (e[0] < 2 && e[1] < 9 || e[0] == 1 && e[1] == 9 && e[2] < 1 || e[0] >= 4) {
        throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
    }
}(jQuery);

+function() {
    var t = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(t) {
        return typeof t;
    } : function(t) {
        return t && typeof Symbol === "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
    };
    var e = function() {
        function t(t, e) {
            for (var n = 0; n < e.length; n++) {
                var i = e[n];
                i.enumerable = i.enumerable || false;
                i.configurable = true;
                if ("value" in i) i.writable = true;
                Object.defineProperty(t, i.key, i);
            }
        }
        return function(e, n, i) {
            if (n) t(e.prototype, n);
            if (i) t(e, i);
            return e;
        };
    }();
    function n(t, e) {
        if (!t) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return e && (typeof e === "object" || typeof e === "function") ? e : t;
    }
    function i(t, e) {
        if (typeof e !== "function" && e !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof e);
        }
        t.prototype = Object.create(e && e.prototype, {
            constructor: {
                value: t,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (e) Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e;
    }
    function r(t, e) {
        if (!(t instanceof e)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }
    var o = function(t) {
        var e = false;
        var n = 1e6;
        var i = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        function r(t) {
            return {}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
        }
        function o(t) {
            return (t[0] || t).nodeType;
        }
        function s() {
            return {
                bindType: e.end,
                delegateType: e.end,
                handle: function e(n) {
                    if (t(n.target).is(this)) {
                        return n.handleObj.handler.apply(this, arguments);
                    }
                    return undefined;
                }
            };
        }
        function a() {
            if (window.QUnit) {
                return false;
            }
            var t = document.createElement("bootstrap");
            for (var e in i) {
                if (t.style[e] !== undefined) {
                    return {
                        end: i[e]
                    };
                }
            }
            return false;
        }
        function l(e) {
            var n = this;
            var i = false;
            t(this).one(u.TRANSITION_END, function() {
                i = true;
            });
            setTimeout(function() {
                if (!i) {
                    u.triggerTransitionEnd(n);
                }
            }, e);
            return this;
        }
        function f() {
            e = a();
            t.fn.emulateTransitionEnd = l;
            if (u.supportsTransitionEnd()) {
                t.event.special[u.TRANSITION_END] = s();
            }
        }
        var u = {
            TRANSITION_END: "bsTransitionEnd",
            getUID: function t(e) {
                do {
                    e += ~~(Math.random() * n);
                } while (document.getElementById(e));
                return e;
            },
            getSelectorFromElement: function t(e) {
                var n = e.getAttribute("data-target");
                if (!n) {
                    n = e.getAttribute("href") || "";
                    n = /^#[a-z]/i.test(n) ? n : null;
                }
                return n;
            },
            reflow: function t(e) {
                return e.offsetHeight;
            },
            triggerTransitionEnd: function n(i) {
                t(i).trigger(e.end);
            },
            supportsTransitionEnd: function t() {
                return Boolean(e);
            },
            typeCheckConfig: function t(e, n, i) {
                for (var s in i) {
                    if (i.hasOwnProperty(s)) {
                        var a = i[s];
                        var l = n[s];
                        var f = l && o(l) ? "element" : r(l);
                        if (!new RegExp(a).test(f)) {
                            throw new Error(e.toUpperCase() + ": " + ('Option "' + s + '" provided type "' + f + '" ') + ('but expected type "' + a + '".'));
                        }
                    }
                }
            }
        };
        f();
        return u;
    }(jQuery);
    var s = function(t) {
        var n = "alert";
        var i = "4.0.0-alpha.6";
        var s = "bs.alert";
        var a = "." + s;
        var l = ".data-api";
        var f = t.fn[n];
        var u = 150;
        var h = {
            DISMISS: '[data-dismiss="alert"]'
        };
        var c = {
            CLOSE: "close" + a,
            CLOSED: "closed" + a,
            CLICK_DATA_API: "click" + a + l
        };
        var d = {
            ALERT: "alert",
            FADE: "fade",
            SHOW: "show"
        };
        var p = function() {
            function n(t) {
                r(this, n);
                this._element = t;
            }
            n.prototype.close = function t(e) {
                e = e || this._element;
                var n = this._getRootElement(e);
                var i = this._triggerCloseEvent(n);
                if (i.isDefaultPrevented()) {
                    return;
                }
                this._removeElement(n);
            };
            n.prototype.dispose = function e() {
                t.removeData(this._element, s);
                this._element = null;
            };
            n.prototype._getRootElement = function e(n) {
                var i = o.getSelectorFromElement(n);
                var r = false;
                if (i) {
                    r = t(i)[0];
                }
                if (!r) {
                    r = t(n).closest("." + d.ALERT)[0];
                }
                return r;
            };
            n.prototype._triggerCloseEvent = function e(n) {
                var i = t.Event(c.CLOSE);
                t(n).trigger(i);
                return i;
            };
            n.prototype._removeElement = function e(n) {
                var i = this;
                t(n).removeClass(d.SHOW);
                if (!o.supportsTransitionEnd() || !t(n).hasClass(d.FADE)) {
                    this._destroyElement(n);
                    return;
                }
                t(n).one(o.TRANSITION_END, function(t) {
                    return i._destroyElement(n, t);
                }).emulateTransitionEnd(u);
            };
            n.prototype._destroyElement = function e(n) {
                t(n).detach().trigger(c.CLOSED).remove();
            };
            n._jQueryInterface = function e(i) {
                return this.each(function() {
                    var e = t(this);
                    var r = e.data(s);
                    if (!r) {
                        r = new n(this);
                        e.data(s, r);
                    }
                    if (i === "close") {
                        r[i](this);
                    }
                });
            };
            n._handleDismiss = function t(e) {
                return function(t) {
                    if (t) {
                        t.preventDefault();
                    }
                    e.close(this);
                };
            };
            e(n, null, [ {
                key: "VERSION",
                get: function t() {
                    return i;
                }
            } ]);
            return n;
        }();
        t(document).on(c.CLICK_DATA_API, h.DISMISS, p._handleDismiss(new p()));
        t.fn[n] = p._jQueryInterface;
        t.fn[n].Constructor = p;
        t.fn[n].noConflict = function() {
            t.fn[n] = f;
            return p._jQueryInterface;
        };
        return p;
    }(jQuery);
    var a = function(t) {
        var n = "button";
        var i = "4.0.0-alpha.6";
        var o = "bs.button";
        var s = "." + o;
        var a = ".data-api";
        var l = t.fn[n];
        var f = {
            ACTIVE: "active",
            BUTTON: "btn",
            FOCUS: "focus"
        };
        var u = {
            DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
            DATA_TOGGLE: '[data-toggle="buttons"]',
            INPUT: "input",
            ACTIVE: ".active",
            BUTTON: ".btn"
        };
        var h = {
            CLICK_DATA_API: "click" + s + a,
            FOCUS_BLUR_DATA_API: "focus" + s + a + " " + ("blur" + s + a)
        };
        var c = function() {
            function n(t) {
                r(this, n);
                this._element = t;
            }
            n.prototype.toggle = function e() {
                var n = true;
                var i = t(this._element).closest(u.DATA_TOGGLE)[0];
                if (i) {
                    var r = t(this._element).find(u.INPUT)[0];
                    if (r) {
                        if (r.type === "radio") {
                            if (r.checked && t(this._element).hasClass(f.ACTIVE)) {
                                n = false;
                            } else {
                                var o = t(i).find(u.ACTIVE)[0];
                                if (o) {
                                    t(o).removeClass(f.ACTIVE);
                                }
                            }
                        }
                        if (n) {
                            r.checked = !t(this._element).hasClass(f.ACTIVE);
                            t(r).trigger("change");
                        }
                        r.focus();
                    }
                }
                this._element.setAttribute("aria-pressed", !t(this._element).hasClass(f.ACTIVE));
                if (n) {
                    t(this._element).toggleClass(f.ACTIVE);
                }
            };
            n.prototype.dispose = function e() {
                t.removeData(this._element, o);
                this._element = null;
            };
            n._jQueryInterface = function e(i) {
                return this.each(function() {
                    var e = t(this).data(o);
                    if (!e) {
                        e = new n(this);
                        t(this).data(o, e);
                    }
                    if (i === "toggle") {
                        e[i]();
                    }
                });
            };
            e(n, null, [ {
                key: "VERSION",
                get: function t() {
                    return i;
                }
            } ]);
            return n;
        }();
        t(document).on(h.CLICK_DATA_API, u.DATA_TOGGLE_CARROT, function(e) {
            e.preventDefault();
            var n = e.target;
            if (!t(n).hasClass(f.BUTTON)) {
                n = t(n).closest(u.BUTTON);
            }
            c._jQueryInterface.call(t(n), "toggle");
        }).on(h.FOCUS_BLUR_DATA_API, u.DATA_TOGGLE_CARROT, function(e) {
            var n = t(e.target).closest(u.BUTTON)[0];
            t(n).toggleClass(f.FOCUS, /^focus(in)?$/.test(e.type));
        });
        t.fn[n] = c._jQueryInterface;
        t.fn[n].Constructor = c;
        t.fn[n].noConflict = function() {
            t.fn[n] = l;
            return c._jQueryInterface;
        };
        return c;
    }(jQuery);
    var l = function(n) {
        var i = "carousel";
        var s = "4.0.0-alpha.6";
        var a = "bs.carousel";
        var l = "." + a;
        var f = ".data-api";
        var u = n.fn[i];
        var h = 600;
        var c = 37;
        var d = 39;
        var p = {
            interval: 5e3,
            keyboard: true,
            slide: false,
            pause: "hover",
            wrap: true
        };
        var v = {
            interval: "(number|boolean)",
            keyboard: "boolean",
            slide: "(boolean|string)",
            pause: "(string|boolean)",
            wrap: "boolean"
        };
        var g = {
            NEXT: "next",
            PREV: "prev",
            LEFT: "left",
            RIGHT: "right"
        };
        var m = {
            SLIDE: "slide" + l,
            SLID: "slid" + l,
            KEYDOWN: "keydown" + l,
            MOUSEENTER: "mouseenter" + l,
            MOUSELEAVE: "mouseleave" + l,
            LOAD_DATA_API: "load" + l + f,
            CLICK_DATA_API: "click" + l + f
        };
        var _ = {
            CAROUSEL: "carousel",
            ACTIVE: "active",
            SLIDE: "slide",
            RIGHT: "carousel-item-right",
            LEFT: "carousel-item-left",
            NEXT: "carousel-item-next",
            PREV: "carousel-item-prev",
            ITEM: "carousel-item"
        };
        var y = {
            ACTIVE: ".active",
            ACTIVE_ITEM: ".active.carousel-item",
            ITEM: ".carousel-item",
            NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
            INDICATORS: ".carousel-indicators",
            DATA_SLIDE: "[data-slide], [data-slide-to]",
            DATA_RIDE: '[data-ride="carousel"]'
        };
        var E = function() {
            function f(t, e) {
                r(this, f);
                this._items = null;
                this._interval = null;
                this._activeElement = null;
                this._isPaused = false;
                this._isSliding = false;
                this._config = this._getConfig(e);
                this._element = n(t)[0];
                this._indicatorsElement = n(this._element).find(y.INDICATORS)[0];
                this._addEventListeners();
            }
            f.prototype.next = function t() {
                if (this._isSliding) {
                    throw new Error("Carousel is sliding");
                }
                this._slide(g.NEXT);
            };
            f.prototype.nextWhenVisible = function t() {
                if (!document.hidden) {
                    this.next();
                }
            };
            f.prototype.prev = function t() {
                if (this._isSliding) {
                    throw new Error("Carousel is sliding");
                }
                this._slide(g.PREVIOUS);
            };
            f.prototype.pause = function t(e) {
                if (!e) {
                    this._isPaused = true;
                }
                if (n(this._element).find(y.NEXT_PREV)[0] && o.supportsTransitionEnd()) {
                    o.triggerTransitionEnd(this._element);
                    this.cycle(true);
                }
                clearInterval(this._interval);
                this._interval = null;
            };
            f.prototype.cycle = function t(e) {
                if (!e) {
                    this._isPaused = false;
                }
                if (this._interval) {
                    clearInterval(this._interval);
                    this._interval = null;
                }
                if (this._config.interval && !this._isPaused) {
                    this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
                }
            };
            f.prototype.to = function t(e) {
                var i = this;
                this._activeElement = n(this._element).find(y.ACTIVE_ITEM)[0];
                var r = this._getItemIndex(this._activeElement);
                if (e > this._items.length - 1 || e < 0) {
                    return;
                }
                if (this._isSliding) {
                    n(this._element).one(m.SLID, function() {
                        return i.to(e);
                    });
                    return;
                }
                if (r === e) {
                    this.pause();
                    this.cycle();
                    return;
                }
                var o = e > r ? g.NEXT : g.PREVIOUS;
                this._slide(o, this._items[e]);
            };
            f.prototype.dispose = function t() {
                n(this._element).off(l);
                n.removeData(this._element, a);
                this._items = null;
                this._config = null;
                this._element = null;
                this._interval = null;
                this._isPaused = null;
                this._isSliding = null;
                this._activeElement = null;
                this._indicatorsElement = null;
            };
            f.prototype._getConfig = function t(e) {
                e = n.extend({}, p, e);
                o.typeCheckConfig(i, e, v);
                return e;
            };
            f.prototype._addEventListeners = function t() {
                var e = this;
                if (this._config.keyboard) {
                    n(this._element).on(m.KEYDOWN, function(t) {
                        return e._keydown(t);
                    });
                }
                if (this._config.pause === "hover" && !("ontouchstart" in document.documentElement)) {
                    n(this._element).on(m.MOUSEENTER, function(t) {
                        return e.pause(t);
                    }).on(m.MOUSELEAVE, function(t) {
                        return e.cycle(t);
                    });
                }
            };
            f.prototype._keydown = function t(e) {
                if (/input|textarea/i.test(e.target.tagName)) {
                    return;
                }
                switch (e.which) {
                  case c:
                    e.preventDefault();
                    this.prev();
                    break;

                  case d:
                    e.preventDefault();
                    this.next();
                    break;

                  default:
                    return;
                }
            };
            f.prototype._getItemIndex = function t(e) {
                this._items = n.makeArray(n(e).parent().find(y.ITEM));
                return this._items.indexOf(e);
            };
            f.prototype._getItemByDirection = function t(e, n) {
                var i = e === g.NEXT;
                var r = e === g.PREVIOUS;
                var o = this._getItemIndex(n);
                var s = this._items.length - 1;
                var a = r && o === 0 || i && o === s;
                if (a && !this._config.wrap) {
                    return n;
                }
                var l = e === g.PREVIOUS ? -1 : 1;
                var f = (o + l) % this._items.length;
                return f === -1 ? this._items[this._items.length - 1] : this._items[f];
            };
            f.prototype._triggerSlideEvent = function t(e, i) {
                var r = n.Event(m.SLIDE, {
                    relatedTarget: e,
                    direction: i
                });
                n(this._element).trigger(r);
                return r;
            };
            f.prototype._setActiveIndicatorElement = function t(e) {
                if (this._indicatorsElement) {
                    n(this._indicatorsElement).find(y.ACTIVE).removeClass(_.ACTIVE);
                    var i = this._indicatorsElement.children[this._getItemIndex(e)];
                    if (i) {
                        n(i).addClass(_.ACTIVE);
                    }
                }
            };
            f.prototype._slide = function t(e, i) {
                var r = this;
                var s = n(this._element).find(y.ACTIVE_ITEM)[0];
                var a = i || s && this._getItemByDirection(e, s);
                var l = Boolean(this._interval);
                var f = void 0;
                var u = void 0;
                var c = void 0;
                if (e === g.NEXT) {
                    f = _.LEFT;
                    u = _.NEXT;
                    c = g.LEFT;
                } else {
                    f = _.RIGHT;
                    u = _.PREV;
                    c = g.RIGHT;
                }
                if (a && n(a).hasClass(_.ACTIVE)) {
                    this._isSliding = false;
                    return;
                }
                var d = this._triggerSlideEvent(a, c);
                if (d.isDefaultPrevented()) {
                    return;
                }
                if (!s || !a) {
                    return;
                }
                this._isSliding = true;
                if (l) {
                    this.pause();
                }
                this._setActiveIndicatorElement(a);
                var p = n.Event(m.SLID, {
                    relatedTarget: a,
                    direction: c
                });
                if (o.supportsTransitionEnd() && n(this._element).hasClass(_.SLIDE)) {
                    n(a).addClass(u);
                    o.reflow(a);
                    n(s).addClass(f);
                    n(a).addClass(f);
                    n(s).one(o.TRANSITION_END, function() {
                        n(a).removeClass(f + " " + u).addClass(_.ACTIVE);
                        n(s).removeClass(_.ACTIVE + " " + u + " " + f);
                        r._isSliding = false;
                        setTimeout(function() {
                            return n(r._element).trigger(p);
                        }, 0);
                    }).emulateTransitionEnd(h);
                } else {
                    n(s).removeClass(_.ACTIVE);
                    n(a).addClass(_.ACTIVE);
                    this._isSliding = false;
                    n(this._element).trigger(p);
                }
                if (l) {
                    this.cycle();
                }
            };
            f._jQueryInterface = function e(i) {
                return this.each(function() {
                    var e = n(this).data(a);
                    var r = n.extend({}, p, n(this).data());
                    if ((typeof i === "undefined" ? "undefined" : t(i)) === "object") {
                        n.extend(r, i);
                    }
                    var o = typeof i === "string" ? i : r.slide;
                    if (!e) {
                        e = new f(this, r);
                        n(this).data(a, e);
                    }
                    if (typeof i === "number") {
                        e.to(i);
                    } else if (typeof o === "string") {
                        if (e[o] === undefined) {
                            throw new Error('No method named "' + o + '"');
                        }
                        e[o]();
                    } else if (r.interval) {
                        e.pause();
                        e.cycle();
                    }
                });
            };
            f._dataApiClickHandler = function t(e) {
                var i = o.getSelectorFromElement(this);
                if (!i) {
                    return;
                }
                var r = n(i)[0];
                if (!r || !n(r).hasClass(_.CAROUSEL)) {
                    return;
                }
                var s = n.extend({}, n(r).data(), n(this).data());
                var l = this.getAttribute("data-slide-to");
                if (l) {
                    s.interval = false;
                }
                f._jQueryInterface.call(n(r), s);
                if (l) {
                    n(r).data(a).to(l);
                }
                e.preventDefault();
            };
            e(f, null, [ {
                key: "VERSION",
                get: function t() {
                    return s;
                }
            }, {
                key: "Default",
                get: function t() {
                    return p;
                }
            } ]);
            return f;
        }();
        n(document).on(m.CLICK_DATA_API, y.DATA_SLIDE, E._dataApiClickHandler);
        n(window).on(m.LOAD_DATA_API, function() {
            n(y.DATA_RIDE).each(function() {
                var t = n(this);
                E._jQueryInterface.call(t, t.data());
            });
        });
        n.fn[i] = E._jQueryInterface;
        n.fn[i].Constructor = E;
        n.fn[i].noConflict = function() {
            n.fn[i] = u;
            return E._jQueryInterface;
        };
        return E;
    }(jQuery);
    var f = function(n) {
        var i = "collapse";
        var s = "4.0.0-alpha.6";
        var a = "bs.collapse";
        var l = "." + a;
        var f = ".data-api";
        var u = n.fn[i];
        var h = 600;
        var c = {
            toggle: true,
            parent: ""
        };
        var d = {
            toggle: "boolean",
            parent: "string"
        };
        var p = {
            SHOW: "show" + l,
            SHOWN: "shown" + l,
            HIDE: "hide" + l,
            HIDDEN: "hidden" + l,
            CLICK_DATA_API: "click" + l + f
        };
        var v = {
            SHOW: "show",
            COLLAPSE: "collapse",
            COLLAPSING: "collapsing",
            COLLAPSED: "collapsed"
        };
        var g = {
            WIDTH: "width",
            HEIGHT: "height"
        };
        var m = {
            ACTIVES: ".card > .show, .card > .collapsing",
            DATA_TOGGLE: '[data-toggle="collapse"]'
        };
        var _ = function() {
            function l(t, e) {
                r(this, l);
                this._isTransitioning = false;
                this._element = t;
                this._config = this._getConfig(e);
                this._triggerArray = n.makeArray(n('[data-toggle="collapse"][href="#' + t.id + '"],' + ('[data-toggle="collapse"][data-target="#' + t.id + '"]')));
                this._parent = this._config.parent ? this._getParent() : null;
                if (!this._config.parent) {
                    this._addAriaAndCollapsedClass(this._element, this._triggerArray);
                }
                if (this._config.toggle) {
                    this.toggle();
                }
            }
            l.prototype.toggle = function t() {
                if (n(this._element).hasClass(v.SHOW)) {
                    this.hide();
                } else {
                    this.show();
                }
            };
            l.prototype.show = function t() {
                var e = this;
                if (this._isTransitioning) {
                    throw new Error("Collapse is transitioning");
                }
                if (n(this._element).hasClass(v.SHOW)) {
                    return;
                }
                var i = void 0;
                var r = void 0;
                if (this._parent) {
                    i = n.makeArray(n(this._parent).find(m.ACTIVES));
                    if (!i.length) {
                        i = null;
                    }
                }
                if (i) {
                    r = n(i).data(a);
                    if (r && r._isTransitioning) {
                        return;
                    }
                }
                var s = n.Event(p.SHOW);
                n(this._element).trigger(s);
                if (s.isDefaultPrevented()) {
                    return;
                }
                if (i) {
                    l._jQueryInterface.call(n(i), "hide");
                    if (!r) {
                        n(i).data(a, null);
                    }
                }
                var f = this._getDimension();
                n(this._element).removeClass(v.COLLAPSE).addClass(v.COLLAPSING);
                this._element.style[f] = 0;
                this._element.setAttribute("aria-expanded", true);
                if (this._triggerArray.length) {
                    n(this._triggerArray).removeClass(v.COLLAPSED).attr("aria-expanded", true);
                }
                this.setTransitioning(true);
                var u = function t() {
                    n(e._element).removeClass(v.COLLAPSING).addClass(v.COLLAPSE).addClass(v.SHOW);
                    e._element.style[f] = "";
                    e.setTransitioning(false);
                    n(e._element).trigger(p.SHOWN);
                };
                if (!o.supportsTransitionEnd()) {
                    u();
                    return;
                }
                var c = f[0].toUpperCase() + f.slice(1);
                var d = "scroll" + c;
                n(this._element).one(o.TRANSITION_END, u).emulateTransitionEnd(h);
                this._element.style[f] = this._element[d] + "px";
            };
            l.prototype.hide = function t() {
                var e = this;
                if (this._isTransitioning) {
                    throw new Error("Collapse is transitioning");
                }
                if (!n(this._element).hasClass(v.SHOW)) {
                    return;
                }
                var i = n.Event(p.HIDE);
                n(this._element).trigger(i);
                if (i.isDefaultPrevented()) {
                    return;
                }
                var r = this._getDimension();
                var s = r === g.WIDTH ? "offsetWidth" : "offsetHeight";
                this._element.style[r] = this._element[s] + "px";
                o.reflow(this._element);
                n(this._element).addClass(v.COLLAPSING).removeClass(v.COLLAPSE).removeClass(v.SHOW);
                this._element.setAttribute("aria-expanded", false);
                if (this._triggerArray.length) {
                    n(this._triggerArray).addClass(v.COLLAPSED).attr("aria-expanded", false);
                }
                this.setTransitioning(true);
                var a = function t() {
                    e.setTransitioning(false);
                    n(e._element).removeClass(v.COLLAPSING).addClass(v.COLLAPSE).trigger(p.HIDDEN);
                };
                this._element.style[r] = "";
                if (!o.supportsTransitionEnd()) {
                    a();
                    return;
                }
                n(this._element).one(o.TRANSITION_END, a).emulateTransitionEnd(h);
            };
            l.prototype.setTransitioning = function t(e) {
                this._isTransitioning = e;
            };
            l.prototype.dispose = function t() {
                n.removeData(this._element, a);
                this._config = null;
                this._parent = null;
                this._element = null;
                this._triggerArray = null;
                this._isTransitioning = null;
            };
            l.prototype._getConfig = function t(e) {
                e = n.extend({}, c, e);
                e.toggle = Boolean(e.toggle);
                o.typeCheckConfig(i, e, d);
                return e;
            };
            l.prototype._getDimension = function t() {
                var e = n(this._element).hasClass(g.WIDTH);
                return e ? g.WIDTH : g.HEIGHT;
            };
            l.prototype._getParent = function t() {
                var e = this;
                var i = n(this._config.parent)[0];
                var r = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
                n(i).find(r).each(function(t, n) {
                    e._addAriaAndCollapsedClass(l._getTargetFromElement(n), [ n ]);
                });
                return i;
            };
            l.prototype._addAriaAndCollapsedClass = function t(e, i) {
                if (e) {
                    var r = n(e).hasClass(v.SHOW);
                    e.setAttribute("aria-expanded", r);
                    if (i.length) {
                        n(i).toggleClass(v.COLLAPSED, !r).attr("aria-expanded", r);
                    }
                }
            };
            l._getTargetFromElement = function t(e) {
                var i = o.getSelectorFromElement(e);
                return i ? n(i)[0] : null;
            };
            l._jQueryInterface = function e(i) {
                return this.each(function() {
                    var e = n(this);
                    var r = e.data(a);
                    var o = n.extend({}, c, e.data(), (typeof i === "undefined" ? "undefined" : t(i)) === "object" && i);
                    if (!r && o.toggle && /show|hide/.test(i)) {
                        o.toggle = false;
                    }
                    if (!r) {
                        r = new l(this, o);
                        e.data(a, r);
                    }
                    if (typeof i === "string") {
                        if (r[i] === undefined) {
                            throw new Error('No method named "' + i + '"');
                        }
                        r[i]();
                    }
                });
            };
            e(l, null, [ {
                key: "VERSION",
                get: function t() {
                    return s;
                }
            }, {
                key: "Default",
                get: function t() {
                    return c;
                }
            } ]);
            return l;
        }();
        n(document).on(p.CLICK_DATA_API, m.DATA_TOGGLE, function(t) {
            t.preventDefault();
            var e = _._getTargetFromElement(this);
            var i = n(e).data(a);
            var r = i ? "toggle" : n(this).data();
            _._jQueryInterface.call(n(e), r);
        });
        n.fn[i] = _._jQueryInterface;
        n.fn[i].Constructor = _;
        n.fn[i].noConflict = function() {
            n.fn[i] = u;
            return _._jQueryInterface;
        };
        return _;
    }(jQuery);
    var u = function(t) {
        var n = "dropdown";
        var i = "4.0.0-alpha.6";
        var s = "bs.dropdown";
        var a = "." + s;
        var l = ".data-api";
        var f = t.fn[n];
        var u = 27;
        var h = 38;
        var c = 40;
        var d = 3;
        var p = {
            HIDE: "hide" + a,
            HIDDEN: "hidden" + a,
            SHOW: "show" + a,
            SHOWN: "shown" + a,
            CLICK: "click" + a,
            CLICK_DATA_API: "click" + a + l,
            FOCUSIN_DATA_API: "focusin" + a + l,
            KEYDOWN_DATA_API: "keydown" + a + l
        };
        var v = {
            BACKDROP: "dropdown-backdrop",
            DISABLED: "disabled",
            SHOW: "show"
        };
        var g = {
            BACKDROP: ".dropdown-backdrop",
            DATA_TOGGLE: '[data-toggle="dropdown"]',
            FORM_CHILD: ".dropdown form",
            ROLE_MENU: '[role="menu"]',
            ROLE_LISTBOX: '[role="listbox"]',
            NAVBAR_NAV: ".navbar-nav",
            VISIBLE_ITEMS: '[role="menu"] li:not(.disabled) a, ' + '[role="listbox"] li:not(.disabled) a'
        };
        var m = function() {
            function n(t) {
                r(this, n);
                this._element = t;
                this._addEventListeners();
            }
            n.prototype.toggle = function e() {
                if (this.disabled || t(this).hasClass(v.DISABLED)) {
                    return false;
                }
                var i = n._getParentFromElement(this);
                var r = t(i).hasClass(v.SHOW);
                n._clearMenus();
                if (r) {
                    return false;
                }
                if ("ontouchstart" in document.documentElement && !t(i).closest(g.NAVBAR_NAV).length) {
                    var o = document.createElement("div");
                    o.className = v.BACKDROP;
                    t(o).insertBefore(this);
                    t(o).on("click", n._clearMenus);
                }
                var s = {
                    relatedTarget: this
                };
                var a = t.Event(p.SHOW, s);
                t(i).trigger(a);
                if (a.isDefaultPrevented()) {
                    return false;
                }
                this.focus();
                this.setAttribute("aria-expanded", true);
                t(i).toggleClass(v.SHOW);
                t(i).trigger(t.Event(p.SHOWN, s));
                return false;
            };
            n.prototype.dispose = function e() {
                t.removeData(this._element, s);
                t(this._element).off(a);
                this._element = null;
            };
            n.prototype._addEventListeners = function e() {
                t(this._element).on(p.CLICK, this.toggle);
            };
            n._jQueryInterface = function e(i) {
                return this.each(function() {
                    var e = t(this).data(s);
                    if (!e) {
                        e = new n(this);
                        t(this).data(s, e);
                    }
                    if (typeof i === "string") {
                        if (e[i] === undefined) {
                            throw new Error('No method named "' + i + '"');
                        }
                        e[i].call(this);
                    }
                });
            };
            n._clearMenus = function e(i) {
                if (i && i.which === d) {
                    return;
                }
                var r = t(g.BACKDROP)[0];
                if (r) {
                    r.parentNode.removeChild(r);
                }
                var o = t.makeArray(t(g.DATA_TOGGLE));
                for (var s = 0; s < o.length; s++) {
                    var a = n._getParentFromElement(o[s]);
                    var l = {
                        relatedTarget: o[s]
                    };
                    if (!t(a).hasClass(v.SHOW)) {
                        continue;
                    }
                    if (i && (i.type === "click" && /input|textarea/i.test(i.target.tagName) || i.type === "focusin") && t.contains(a, i.target)) {
                        continue;
                    }
                    var f = t.Event(p.HIDE, l);
                    t(a).trigger(f);
                    if (f.isDefaultPrevented()) {
                        continue;
                    }
                    o[s].setAttribute("aria-expanded", "false");
                    t(a).removeClass(v.SHOW).trigger(t.Event(p.HIDDEN, l));
                }
            };
            n._getParentFromElement = function e(n) {
                var i = void 0;
                var r = o.getSelectorFromElement(n);
                if (r) {
                    i = t(r)[0];
                }
                return i || n.parentNode;
            };
            n._dataApiKeydownHandler = function e(i) {
                if (!/(38|40|27|32)/.test(i.which) || /input|textarea/i.test(i.target.tagName)) {
                    return;
                }
                i.preventDefault();
                i.stopPropagation();
                if (this.disabled || t(this).hasClass(v.DISABLED)) {
                    return;
                }
                var r = n._getParentFromElement(this);
                var o = t(r).hasClass(v.SHOW);
                if (!o && i.which !== u || o && i.which === u) {
                    if (i.which === u) {
                        var s = t(r).find(g.DATA_TOGGLE)[0];
                        t(s).trigger("focus");
                    }
                    t(this).trigger("click");
                    return;
                }
                var a = t(r).find(g.VISIBLE_ITEMS).get();
                if (!a.length) {
                    return;
                }
                var l = a.indexOf(i.target);
                if (i.which === h && l > 0) {
                    l--;
                }
                if (i.which === c && l < a.length - 1) {
                    l++;
                }
                if (l < 0) {
                    l = 0;
                }
                a[l].focus();
            };
            e(n, null, [ {
                key: "VERSION",
                get: function t() {
                    return i;
                }
            } ]);
            return n;
        }();
        t(document).on(p.KEYDOWN_DATA_API, g.DATA_TOGGLE, m._dataApiKeydownHandler).on(p.KEYDOWN_DATA_API, g.ROLE_MENU, m._dataApiKeydownHandler).on(p.KEYDOWN_DATA_API, g.ROLE_LISTBOX, m._dataApiKeydownHandler).on(p.CLICK_DATA_API + " " + p.FOCUSIN_DATA_API, m._clearMenus).on(p.CLICK_DATA_API, g.DATA_TOGGLE, m.prototype.toggle).on(p.CLICK_DATA_API, g.FORM_CHILD, function(t) {
            t.stopPropagation();
        });
        t.fn[n] = m._jQueryInterface;
        t.fn[n].Constructor = m;
        t.fn[n].noConflict = function() {
            t.fn[n] = f;
            return m._jQueryInterface;
        };
        return m;
    }(jQuery);
    var h = function(n) {
        var i = "modal";
        var s = "4.0.0-alpha.6";
        var a = "bs.modal";
        var l = "." + a;
        var f = ".data-api";
        var u = n.fn[i];
        var h = 300;
        var c = 150;
        var d = 27;
        var p = {
            backdrop: true,
            keyboard: true,
            focus: true,
            show: true
        };
        var v = {
            backdrop: "(boolean|string)",
            keyboard: "boolean",
            focus: "boolean",
            show: "boolean"
        };
        var g = {
            HIDE: "hide" + l,
            HIDDEN: "hidden" + l,
            SHOW: "show" + l,
            SHOWN: "shown" + l,
            FOCUSIN: "focusin" + l,
            RESIZE: "resize" + l,
            CLICK_DISMISS: "click.dismiss" + l,
            KEYDOWN_DISMISS: "keydown.dismiss" + l,
            MOUSEUP_DISMISS: "mouseup.dismiss" + l,
            MOUSEDOWN_DISMISS: "mousedown.dismiss" + l,
            CLICK_DATA_API: "click" + l + f
        };
        var m = {
            SCROLLBAR_MEASURER: "modal-scrollbar-measure",
            BACKDROP: "modal-backdrop",
            OPEN: "modal-open",
            FADE: "fade",
            SHOW: "show"
        };
        var _ = {
            DIALOG: ".modal-dialog",
            DATA_TOGGLE: '[data-toggle="modal"]',
            DATA_DISMISS: '[data-dismiss="modal"]',
            FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"
        };
        var y = function() {
            function f(t, e) {
                r(this, f);
                this._config = this._getConfig(e);
                this._element = t;
                this._dialog = n(t).find(_.DIALOG)[0];
                this._backdrop = null;
                this._isShown = false;
                this._isBodyOverflowing = false;
                this._ignoreBackdropClick = false;
                this._isTransitioning = false;
                this._originalBodyPadding = 0;
                this._scrollbarWidth = 0;
            }
            f.prototype.toggle = function t(e) {
                return this._isShown ? this.hide() : this.show(e);
            };
            f.prototype.show = function t(e) {
                var i = this;
                if (this._isTransitioning) {
                    throw new Error("Modal is transitioning");
                }
                if (o.supportsTransitionEnd() && n(this._element).hasClass(m.FADE)) {
                    this._isTransitioning = true;
                }
                var r = n.Event(g.SHOW, {
                    relatedTarget: e
                });
                n(this._element).trigger(r);
                if (this._isShown || r.isDefaultPrevented()) {
                    return;
                }
                this._isShown = true;
                this._checkScrollbar();
                this._setScrollbar();
                n(document.body).addClass(m.OPEN);
                this._setEscapeEvent();
                this._setResizeEvent();
                n(this._element).on(g.CLICK_DISMISS, _.DATA_DISMISS, function(t) {
                    return i.hide(t);
                });
                n(this._dialog).on(g.MOUSEDOWN_DISMISS, function() {
                    n(i._element).one(g.MOUSEUP_DISMISS, function(t) {
                        if (n(t.target).is(i._element)) {
                            i._ignoreBackdropClick = true;
                        }
                    });
                });
                this._showBackdrop(function() {
                    return i._showElement(e);
                });
            };
            f.prototype.hide = function t(e) {
                var i = this;
                if (e) {
                    e.preventDefault();
                }
                if (this._isTransitioning) {
                    throw new Error("Modal is transitioning");
                }
                var r = o.supportsTransitionEnd() && n(this._element).hasClass(m.FADE);
                if (r) {
                    this._isTransitioning = true;
                }
                var s = n.Event(g.HIDE);
                n(this._element).trigger(s);
                if (!this._isShown || s.isDefaultPrevented()) {
                    return;
                }
                this._isShown = false;
                this._setEscapeEvent();
                this._setResizeEvent();
                n(document).off(g.FOCUSIN);
                n(this._element).removeClass(m.SHOW);
                n(this._element).off(g.CLICK_DISMISS);
                n(this._dialog).off(g.MOUSEDOWN_DISMISS);
                if (r) {
                    n(this._element).one(o.TRANSITION_END, function(t) {
                        return i._hideModal(t);
                    }).emulateTransitionEnd(h);
                } else {
                    this._hideModal();
                }
            };
            f.prototype.dispose = function t() {
                n.removeData(this._element, a);
                n(window, document, this._element, this._backdrop).off(l);
                this._config = null;
                this._element = null;
                this._dialog = null;
                this._backdrop = null;
                this._isShown = null;
                this._isBodyOverflowing = null;
                this._ignoreBackdropClick = null;
                this._originalBodyPadding = null;
                this._scrollbarWidth = null;
            };
            f.prototype._getConfig = function t(e) {
                e = n.extend({}, p, e);
                o.typeCheckConfig(i, e, v);
                return e;
            };
            f.prototype._showElement = function t(e) {
                var i = this;
                var r = o.supportsTransitionEnd() && n(this._element).hasClass(m.FADE);
                if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
                    document.body.appendChild(this._element);
                }
                this._element.style.display = "block";
                this._element.removeAttribute("aria-hidden");
                this._element.scrollTop = 0;
                if (r) {
                    o.reflow(this._element);
                }
                n(this._element).addClass(m.SHOW);
                if (this._config.focus) {
                    this._enforceFocus();
                }
                var s = n.Event(g.SHOWN, {
                    relatedTarget: e
                });
                var a = function t() {
                    if (i._config.focus) {
                        i._element.focus();
                    }
                    i._isTransitioning = false;
                    n(i._element).trigger(s);
                };
                if (r) {
                    n(this._dialog).one(o.TRANSITION_END, a).emulateTransitionEnd(h);
                } else {
                    a();
                }
            };
            f.prototype._enforceFocus = function t() {
                var e = this;
                n(document).off(g.FOCUSIN).on(g.FOCUSIN, function(t) {
                    if (document !== t.target && e._element !== t.target && !n(e._element).has(t.target).length) {
                        e._element.focus();
                    }
                });
            };
            f.prototype._setEscapeEvent = function t() {
                var e = this;
                if (this._isShown && this._config.keyboard) {
                    n(this._element).on(g.KEYDOWN_DISMISS, function(t) {
                        if (t.which === d) {
                            e.hide();
                        }
                    });
                } else if (!this._isShown) {
                    n(this._element).off(g.KEYDOWN_DISMISS);
                }
            };
            f.prototype._setResizeEvent = function t() {
                var e = this;
                if (this._isShown) {
                    n(window).on(g.RESIZE, function(t) {
                        return e._handleUpdate(t);
                    });
                } else {
                    n(window).off(g.RESIZE);
                }
            };
            f.prototype._hideModal = function t() {
                var e = this;
                this._element.style.display = "none";
                this._element.setAttribute("aria-hidden", "true");
                this._isTransitioning = false;
                this._showBackdrop(function() {
                    n(document.body).removeClass(m.OPEN);
                    e._resetAdjustments();
                    e._resetScrollbar();
                    n(e._element).trigger(g.HIDDEN);
                });
            };
            f.prototype._removeBackdrop = function t() {
                if (this._backdrop) {
                    n(this._backdrop).remove();
                    this._backdrop = null;
                }
            };
            f.prototype._showBackdrop = function t(e) {
                var i = this;
                var r = n(this._element).hasClass(m.FADE) ? m.FADE : "";
                if (this._isShown && this._config.backdrop) {
                    var s = o.supportsTransitionEnd() && r;
                    this._backdrop = document.createElement("div");
                    this._backdrop.className = m.BACKDROP;
                    if (r) {
                        n(this._backdrop).addClass(r);
                    }
                    n(this._backdrop).appendTo(document.body);
                    n(this._element).on(g.CLICK_DISMISS, function(t) {
                        if (i._ignoreBackdropClick) {
                            i._ignoreBackdropClick = false;
                            return;
                        }
                        if (t.target !== t.currentTarget) {
                            return;
                        }
                        if (i._config.backdrop === "static") {
                            i._element.focus();
                        } else {
                            i.hide();
                        }
                    });
                    if (s) {
                        o.reflow(this._backdrop);
                    }
                    n(this._backdrop).addClass(m.SHOW);
                    if (!e) {
                        return;
                    }
                    if (!s) {
                        e();
                        return;
                    }
                    n(this._backdrop).one(o.TRANSITION_END, e).emulateTransitionEnd(c);
                } else if (!this._isShown && this._backdrop) {
                    n(this._backdrop).removeClass(m.SHOW);
                    var a = function t() {
                        i._removeBackdrop();
                        if (e) {
                            e();
                        }
                    };
                    if (o.supportsTransitionEnd() && n(this._element).hasClass(m.FADE)) {
                        n(this._backdrop).one(o.TRANSITION_END, a).emulateTransitionEnd(c);
                    } else {
                        a();
                    }
                } else if (e) {
                    e();
                }
            };
            f.prototype._handleUpdate = function t() {
                this._adjustDialog();
            };
            f.prototype._adjustDialog = function t() {
                var e = this._element.scrollHeight > document.documentElement.clientHeight;
                if (!this._isBodyOverflowing && e) {
                    this._element.style.paddingLeft = this._scrollbarWidth + "px";
                }
                if (this._isBodyOverflowing && !e) {
                    this._element.style.paddingRight = this._scrollbarWidth + "px";
                }
            };
            f.prototype._resetAdjustments = function t() {
                this._element.style.paddingLeft = "";
                this._element.style.paddingRight = "";
            };
            f.prototype._checkScrollbar = function t() {
                this._isBodyOverflowing = document.body.clientWidth < window.innerWidth;
                this._scrollbarWidth = this._getScrollbarWidth();
            };
            f.prototype._setScrollbar = function t() {
                var e = parseInt(n(_.FIXED_CONTENT).css("padding-right") || 0, 10);
                this._originalBodyPadding = document.body.style.paddingRight || "";
                if (this._isBodyOverflowing) {
                    document.body.style.paddingRight = e + this._scrollbarWidth + "px";
                }
            };
            f.prototype._resetScrollbar = function t() {
                document.body.style.paddingRight = this._originalBodyPadding;
            };
            f.prototype._getScrollbarWidth = function t() {
                var e = document.createElement("div");
                e.className = m.SCROLLBAR_MEASURER;
                document.body.appendChild(e);
                var n = e.offsetWidth - e.clientWidth;
                document.body.removeChild(e);
                return n;
            };
            f._jQueryInterface = function e(i, r) {
                return this.each(function() {
                    var e = n(this).data(a);
                    var o = n.extend({}, f.Default, n(this).data(), (typeof i === "undefined" ? "undefined" : t(i)) === "object" && i);
                    if (!e) {
                        e = new f(this, o);
                        n(this).data(a, e);
                    }
                    if (typeof i === "string") {
                        if (e[i] === undefined) {
                            throw new Error('No method named "' + i + '"');
                        }
                        e[i](r);
                    } else if (o.show) {
                        e.show(r);
                    }
                });
            };
            e(f, null, [ {
                key: "VERSION",
                get: function t() {
                    return s;
                }
            }, {
                key: "Default",
                get: function t() {
                    return p;
                }
            } ]);
            return f;
        }();
        n(document).on(g.CLICK_DATA_API, _.DATA_TOGGLE, function(t) {
            var e = this;
            var i = void 0;
            var r = o.getSelectorFromElement(this);
            if (r) {
                i = n(r)[0];
            }
            var s = n(i).data(a) ? "toggle" : n.extend({}, n(i).data(), n(this).data());
            if (this.tagName === "A" || this.tagName === "AREA") {
                t.preventDefault();
            }
            var l = n(i).one(g.SHOW, function(t) {
                if (t.isDefaultPrevented()) {
                    return;
                }
                l.one(g.HIDDEN, function() {
                    if (n(e).is(":visible")) {
                        e.focus();
                    }
                });
            });
            y._jQueryInterface.call(n(i), s, this);
        });
        n.fn[i] = y._jQueryInterface;
        n.fn[i].Constructor = y;
        n.fn[i].noConflict = function() {
            n.fn[i] = u;
            return y._jQueryInterface;
        };
        return y;
    }(jQuery);
    var c = function(n) {
        var i = "scrollspy";
        var s = "4.0.0-alpha.6";
        var a = "bs.scrollspy";
        var l = "." + a;
        var f = ".data-api";
        var u = n.fn[i];
        var h = {
            offset: 10,
            method: "auto",
            target: ""
        };
        var c = {
            offset: "number",
            method: "string",
            target: "(string|element)"
        };
        var d = {
            ACTIVATE: "activate" + l,
            SCROLL: "scroll" + l,
            LOAD_DATA_API: "load" + l + f
        };
        var p = {
            DROPDOWN_ITEM: "dropdown-item",
            DROPDOWN_MENU: "dropdown-menu",
            NAV_LINK: "nav-link",
            NAV: "nav",
            ACTIVE: "active"
        };
        var v = {
            DATA_SPY: '[data-spy="scroll"]',
            ACTIVE: ".active",
            LIST_ITEM: ".list-item",
            LI: "li",
            LI_DROPDOWN: "li.dropdown",
            NAV_LINKS: ".nav-link",
            DROPDOWN: ".dropdown",
            DROPDOWN_ITEMS: ".dropdown-item",
            DROPDOWN_TOGGLE: ".dropdown-toggle"
        };
        var g = {
            OFFSET: "offset",
            POSITION: "position"
        };
        var m = function() {
            function f(t, e) {
                var i = this;
                r(this, f);
                this._element = t;
                this._scrollElement = t.tagName === "BODY" ? window : t;
                this._config = this._getConfig(e);
                this._selector = this._config.target + " " + v.NAV_LINKS + "," + (this._config.target + " " + v.DROPDOWN_ITEMS);
                this._offsets = [];
                this._targets = [];
                this._activeTarget = null;
                this._scrollHeight = 0;
                n(this._scrollElement).on(d.SCROLL, function(t) {
                    return i._process(t);
                });
                this.refresh();
                this._process();
            }
            f.prototype.refresh = function t() {
                var e = this;
                var i = this._scrollElement !== this._scrollElement.window ? g.POSITION : g.OFFSET;
                var r = this._config.method === "auto" ? i : this._config.method;
                var s = r === g.POSITION ? this._getScrollTop() : 0;
                this._offsets = [];
                this._targets = [];
                this._scrollHeight = this._getScrollHeight();
                var a = n.makeArray(n(this._selector));
                a.map(function(t) {
                    var e = void 0;
                    var i = o.getSelectorFromElement(t);
                    if (i) {
                        e = n(i)[0];
                    }
                    if (e && (e.offsetWidth || e.offsetHeight)) {
                        return [ n(e)[r]().top + s, i ];
                    }
                    return null;
                }).filter(function(t) {
                    return t;
                }).sort(function(t, e) {
                    return t[0] - e[0];
                }).forEach(function(t) {
                    e._offsets.push(t[0]);
                    e._targets.push(t[1]);
                });
            };
            f.prototype.dispose = function t() {
                n.removeData(this._element, a);
                n(this._scrollElement).off(l);
                this._element = null;
                this._scrollElement = null;
                this._config = null;
                this._selector = null;
                this._offsets = null;
                this._targets = null;
                this._activeTarget = null;
                this._scrollHeight = null;
            };
            f.prototype._getConfig = function t(e) {
                e = n.extend({}, h, e);
                if (typeof e.target !== "string") {
                    var r = n(e.target).attr("id");
                    if (!r) {
                        r = o.getUID(i);
                        n(e.target).attr("id", r);
                    }
                    e.target = "#" + r;
                }
                o.typeCheckConfig(i, e, c);
                return e;
            };
            f.prototype._getScrollTop = function t() {
                return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
            };
            f.prototype._getScrollHeight = function t() {
                return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
            };
            f.prototype._getOffsetHeight = function t() {
                return this._scrollElement === window ? window.innerHeight : this._scrollElement.offsetHeight;
            };
            f.prototype._process = function t() {
                var e = this._getScrollTop() + this._config.offset;
                var n = this._getScrollHeight();
                var i = this._config.offset + n - this._getOffsetHeight();
                if (this._scrollHeight !== n) {
                    this.refresh();
                }
                if (e >= i) {
                    var r = this._targets[this._targets.length - 1];
                    if (this._activeTarget !== r) {
                        this._activate(r);
                    }
                    return;
                }
                if (this._activeTarget && e < this._offsets[0] && this._offsets[0] > 0) {
                    this._activeTarget = null;
                    this._clear();
                    return;
                }
                for (var o = this._offsets.length; o--; ) {
                    var s = this._activeTarget !== this._targets[o] && e >= this._offsets[o] && (this._offsets[o + 1] === undefined || e < this._offsets[o + 1]);
                    if (s) {
                        this._activate(this._targets[o]);
                    }
                }
            };
            f.prototype._activate = function t(e) {
                this._activeTarget = e;
                this._clear();
                var i = this._selector.split(",");
                i = i.map(function(t) {
                    return t + '[data-target="' + e + '"],' + (t + '[href="' + e + '"]');
                });
                var r = n(i.join(","));
                if (r.hasClass(p.DROPDOWN_ITEM)) {
                    r.closest(v.DROPDOWN).find(v.DROPDOWN_TOGGLE).addClass(p.ACTIVE);
                    r.addClass(p.ACTIVE);
                } else {
                    r.parents(v.LI).find("> " + v.NAV_LINKS).addClass(p.ACTIVE);
                }
                n(this._scrollElement).trigger(d.ACTIVATE, {
                    relatedTarget: e
                });
            };
            f.prototype._clear = function t() {
                n(this._selector).filter(v.ACTIVE).removeClass(p.ACTIVE);
            };
            f._jQueryInterface = function e(i) {
                return this.each(function() {
                    var e = n(this).data(a);
                    var r = (typeof i === "undefined" ? "undefined" : t(i)) === "object" && i;
                    if (!e) {
                        e = new f(this, r);
                        n(this).data(a, e);
                    }
                    if (typeof i === "string") {
                        if (e[i] === undefined) {
                            throw new Error('No method named "' + i + '"');
                        }
                        e[i]();
                    }
                });
            };
            e(f, null, [ {
                key: "VERSION",
                get: function t() {
                    return s;
                }
            }, {
                key: "Default",
                get: function t() {
                    return h;
                }
            } ]);
            return f;
        }();
        n(window).on(d.LOAD_DATA_API, function() {
            var t = n.makeArray(n(v.DATA_SPY));
            for (var e = t.length; e--; ) {
                var i = n(t[e]);
                m._jQueryInterface.call(i, i.data());
            }
        });
        n.fn[i] = m._jQueryInterface;
        n.fn[i].Constructor = m;
        n.fn[i].noConflict = function() {
            n.fn[i] = u;
            return m._jQueryInterface;
        };
        return m;
    }(jQuery);
    var d = function(t) {
        var n = "tab";
        var i = "4.0.0-alpha.6";
        var s = "bs.tab";
        var a = "." + s;
        var l = ".data-api";
        var f = t.fn[n];
        var u = 150;
        var h = {
            HIDE: "hide" + a,
            HIDDEN: "hidden" + a,
            SHOW: "show" + a,
            SHOWN: "shown" + a,
            CLICK_DATA_API: "click" + a + l
        };
        var c = {
            DROPDOWN_MENU: "dropdown-menu",
            ACTIVE: "active",
            DISABLED: "disabled",
            FADE: "fade",
            SHOW: "show"
        };
        var d = {
            A: "a",
            LI: "li",
            DROPDOWN: ".dropdown",
            LIST: "ul:not(.dropdown-menu), ol:not(.dropdown-menu), nav:not(.dropdown-menu)",
            FADE_CHILD: "> .nav-item .fade, > .fade",
            ACTIVE: ".active",
            ACTIVE_CHILD: "> .nav-item > .active, > .active",
            DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"]',
            DROPDOWN_TOGGLE: ".dropdown-toggle",
            DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active"
        };
        var p = function() {
            function n(t) {
                r(this, n);
                this._element = t;
            }
            n.prototype.show = function e() {
                var n = this;
                if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && t(this._element).hasClass(c.ACTIVE) || t(this._element).hasClass(c.DISABLED)) {
                    return;
                }
                var i = void 0;
                var r = void 0;
                var s = t(this._element).closest(d.LIST)[0];
                var a = o.getSelectorFromElement(this._element);
                if (s) {
                    r = t.makeArray(t(s).find(d.ACTIVE));
                    r = r[r.length - 1];
                }
                var l = t.Event(h.HIDE, {
                    relatedTarget: this._element
                });
                var f = t.Event(h.SHOW, {
                    relatedTarget: r
                });
                if (r) {
                    t(r).trigger(l);
                }
                t(this._element).trigger(f);
                if (f.isDefaultPrevented() || l.isDefaultPrevented()) {
                    return;
                }
                if (a) {
                    i = t(a)[0];
                }
                this._activate(this._element, s);
                var u = function e() {
                    var i = t.Event(h.HIDDEN, {
                        relatedTarget: n._element
                    });
                    var o = t.Event(h.SHOWN, {
                        relatedTarget: r
                    });
                    t(r).trigger(i);
                    t(n._element).trigger(o);
                };
                if (i) {
                    this._activate(i, i.parentNode, u);
                } else {
                    u();
                }
            };
            n.prototype.dispose = function e() {
                t.removeClass(this._element, s);
                this._element = null;
            };
            n.prototype._activate = function e(n, i, r) {
                var s = this;
                var a = t(i).find(d.ACTIVE_CHILD)[0];
                var l = r && o.supportsTransitionEnd() && (a && t(a).hasClass(c.FADE) || Boolean(t(i).find(d.FADE_CHILD)[0]));
                var f = function t() {
                    return s._transitionComplete(n, a, l, r);
                };
                if (a && l) {
                    t(a).one(o.TRANSITION_END, f).emulateTransitionEnd(u);
                } else {
                    f();
                }
                if (a) {
                    t(a).removeClass(c.SHOW);
                }
            };
            n.prototype._transitionComplete = function e(n, i, r, s) {
                if (i) {
                    t(i).removeClass(c.ACTIVE);
                    var a = t(i.parentNode).find(d.DROPDOWN_ACTIVE_CHILD)[0];
                    if (a) {
                        t(a).removeClass(c.ACTIVE);
                    }
                    i.setAttribute("aria-expanded", false);
                }
                t(n).addClass(c.ACTIVE);
                n.setAttribute("aria-expanded", true);
                if (r) {
                    o.reflow(n);
                    t(n).addClass(c.SHOW);
                } else {
                    t(n).removeClass(c.FADE);
                }
                if (n.parentNode && t(n.parentNode).hasClass(c.DROPDOWN_MENU)) {
                    var l = t(n).closest(d.DROPDOWN)[0];
                    if (l) {
                        t(l).find(d.DROPDOWN_TOGGLE).addClass(c.ACTIVE);
                    }
                    n.setAttribute("aria-expanded", true);
                }
                if (s) {
                    s();
                }
            };
            n._jQueryInterface = function e(i) {
                return this.each(function() {
                    var e = t(this);
                    var r = e.data(s);
                    if (!r) {
                        r = new n(this);
                        e.data(s, r);
                    }
                    if (typeof i === "string") {
                        if (r[i] === undefined) {
                            throw new Error('No method named "' + i + '"');
                        }
                        r[i]();
                    }
                });
            };
            e(n, null, [ {
                key: "VERSION",
                get: function t() {
                    return i;
                }
            } ]);
            return n;
        }();
        t(document).on(h.CLICK_DATA_API, d.DATA_TOGGLE, function(e) {
            e.preventDefault();
            p._jQueryInterface.call(t(this), "show");
        });
        t.fn[n] = p._jQueryInterface;
        t.fn[n].Constructor = p;
        t.fn[n].noConflict = function() {
            t.fn[n] = f;
            return p._jQueryInterface;
        };
        return p;
    }(jQuery);
    var p = function(n) {
        if (typeof Tether === "undefined") {
            throw new Error("Bootstrap tooltips require Tether (http://tether.io/)");
        }
        var i = "tooltip";
        var s = "4.0.0-alpha.6";
        var a = "bs.tooltip";
        var l = "." + a;
        var f = n.fn[i];
        var u = 150;
        var h = "bs-tether";
        var c = {
            animation: true,
            template: '<div class="tooltip" role="tooltip">' + '<div class="tooltip-inner"></div></div>',
            trigger: "hover focus",
            title: "",
            delay: 0,
            html: false,
            selector: false,
            placement: "top",
            offset: "0 0",
            constraints: [],
            container: false
        };
        var d = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "string",
            constraints: "array",
            container: "(string|element|boolean)"
        };
        var p = {
            TOP: "bottom center",
            RIGHT: "middle left",
            BOTTOM: "top center",
            LEFT: "middle right"
        };
        var v = {
            SHOW: "show",
            OUT: "out"
        };
        var g = {
            HIDE: "hide" + l,
            HIDDEN: "hidden" + l,
            SHOW: "show" + l,
            SHOWN: "shown" + l,
            INSERTED: "inserted" + l,
            CLICK: "click" + l,
            FOCUSIN: "focusin" + l,
            FOCUSOUT: "focusout" + l,
            MOUSEENTER: "mouseenter" + l,
            MOUSELEAVE: "mouseleave" + l
        };
        var m = {
            FADE: "fade",
            SHOW: "show"
        };
        var _ = {
            TOOLTIP: ".tooltip",
            TOOLTIP_INNER: ".tooltip-inner"
        };
        var y = {
            element: false,
            enabled: false
        };
        var E = {
            HOVER: "hover",
            FOCUS: "focus",
            CLICK: "click",
            MANUAL: "manual"
        };
        var T = function() {
            function f(t, e) {
                r(this, f);
                this._isEnabled = true;
                this._timeout = 0;
                this._hoverState = "";
                this._activeTrigger = {};
                this._isTransitioning = false;
                this._tether = null;
                this.element = t;
                this.config = this._getConfig(e);
                this.tip = null;
                this._setListeners();
            }
            f.prototype.enable = function t() {
                this._isEnabled = true;
            };
            f.prototype.disable = function t() {
                this._isEnabled = false;
            };
            f.prototype.toggleEnabled = function t() {
                this._isEnabled = !this._isEnabled;
            };
            f.prototype.toggle = function t(e) {
                if (e) {
                    var i = this.constructor.DATA_KEY;
                    var r = n(e.currentTarget).data(i);
                    if (!r) {
                        r = new this.constructor(e.currentTarget, this._getDelegateConfig());
                        n(e.currentTarget).data(i, r);
                    }
                    r._activeTrigger.click = !r._activeTrigger.click;
                    if (r._isWithActiveTrigger()) {
                        r._enter(null, r);
                    } else {
                        r._leave(null, r);
                    }
                } else {
                    if (n(this.getTipElement()).hasClass(m.SHOW)) {
                        this._leave(null, this);
                        return;
                    }
                    this._enter(null, this);
                }
            };
            f.prototype.dispose = function t() {
                clearTimeout(this._timeout);
                this.cleanupTether();
                n.removeData(this.element, this.constructor.DATA_KEY);
                n(this.element).off(this.constructor.EVENT_KEY);
                n(this.element).closest(".modal").off("hide.bs.modal");
                if (this.tip) {
                    n(this.tip).remove();
                }
                this._isEnabled = null;
                this._timeout = null;
                this._hoverState = null;
                this._activeTrigger = null;
                this._tether = null;
                this.element = null;
                this.config = null;
                this.tip = null;
            };
            f.prototype.show = function t() {
                var e = this;
                if (n(this.element).css("display") === "none") {
                    throw new Error("Please use show on visible elements");
                }
                var i = n.Event(this.constructor.Event.SHOW);
                if (this.isWithContent() && this._isEnabled) {
                    if (this._isTransitioning) {
                        throw new Error("Tooltip is transitioning");
                    }
                    n(this.element).trigger(i);
                    var r = n.contains(this.element.ownerDocument.documentElement, this.element);
                    if (i.isDefaultPrevented() || !r) {
                        return;
                    }
                    var s = this.getTipElement();
                    var a = o.getUID(this.constructor.NAME);
                    s.setAttribute("id", a);
                    this.element.setAttribute("aria-describedby", a);
                    this.setContent();
                    if (this.config.animation) {
                        n(s).addClass(m.FADE);
                    }
                    var l = typeof this.config.placement === "function" ? this.config.placement.call(this, s, this.element) : this.config.placement;
                    var u = this._getAttachment(l);
                    var c = this.config.container === false ? document.body : n(this.config.container);
                    n(s).data(this.constructor.DATA_KEY, this).appendTo(c);
                    n(this.element).trigger(this.constructor.Event.INSERTED);
                    this._tether = new Tether({
                        attachment: u,
                        element: s,
                        target: this.element,
                        classes: y,
                        classPrefix: h,
                        offset: this.config.offset,
                        constraints: this.config.constraints,
                        addTargetClasses: false
                    });
                    o.reflow(s);
                    this._tether.position();
                    n(s).addClass(m.SHOW);
                    var d = function t() {
                        var i = e._hoverState;
                        e._hoverState = null;
                        e._isTransitioning = false;
                        n(e.element).trigger(e.constructor.Event.SHOWN);
                        if (i === v.OUT) {
                            e._leave(null, e);
                        }
                    };
                    if (o.supportsTransitionEnd() && n(this.tip).hasClass(m.FADE)) {
                        this._isTransitioning = true;
                        n(this.tip).one(o.TRANSITION_END, d).emulateTransitionEnd(f._TRANSITION_DURATION);
                        return;
                    }
                    d();
                }
            };
            f.prototype.hide = function t(e) {
                var i = this;
                var r = this.getTipElement();
                var s = n.Event(this.constructor.Event.HIDE);
                if (this._isTransitioning) {
                    throw new Error("Tooltip is transitioning");
                }
                var a = function t() {
                    if (i._hoverState !== v.SHOW && r.parentNode) {
                        r.parentNode.removeChild(r);
                    }
                    i.element.removeAttribute("aria-describedby");
                    n(i.element).trigger(i.constructor.Event.HIDDEN);
                    i._isTransitioning = false;
                    i.cleanupTether();
                    if (e) {
                        e();
                    }
                };
                n(this.element).trigger(s);
                if (s.isDefaultPrevented()) {
                    return;
                }
                n(r).removeClass(m.SHOW);
                this._activeTrigger[E.CLICK] = false;
                this._activeTrigger[E.FOCUS] = false;
                this._activeTrigger[E.HOVER] = false;
                if (o.supportsTransitionEnd() && n(this.tip).hasClass(m.FADE)) {
                    this._isTransitioning = true;
                    n(r).one(o.TRANSITION_END, a).emulateTransitionEnd(u);
                } else {
                    a();
                }
                this._hoverState = "";
            };
            f.prototype.isWithContent = function t() {
                return Boolean(this.getTitle());
            };
            f.prototype.getTipElement = function t() {
                return this.tip = this.tip || n(this.config.template)[0];
            };
            f.prototype.setContent = function t() {
                var e = n(this.getTipElement());
                this.setElementContent(e.find(_.TOOLTIP_INNER), this.getTitle());
                e.removeClass(m.FADE + " " + m.SHOW);
                this.cleanupTether();
            };
            f.prototype.setElementContent = function e(i, r) {
                var o = this.config.html;
                if ((typeof r === "undefined" ? "undefined" : t(r)) === "object" && (r.nodeType || r.jquery)) {
                    if (o) {
                        if (!n(r).parent().is(i)) {
                            i.empty().append(r);
                        }
                    } else {
                        i.text(n(r).text());
                    }
                } else {
                    i[o ? "html" : "text"](r);
                }
            };
            f.prototype.getTitle = function t() {
                var e = this.element.getAttribute("data-original-title");
                if (!e) {
                    e = typeof this.config.title === "function" ? this.config.title.call(this.element) : this.config.title;
                }
                return e;
            };
            f.prototype.cleanupTether = function t() {
                if (this._tether) {
                    this._tether.destroy();
                }
            };
            f.prototype._getAttachment = function t(e) {
                return p[e.toUpperCase()];
            };
            f.prototype._setListeners = function t() {
                var e = this;
                var i = this.config.trigger.split(" ");
                i.forEach(function(t) {
                    if (t === "click") {
                        n(e.element).on(e.constructor.Event.CLICK, e.config.selector, function(t) {
                            return e.toggle(t);
                        });
                    } else if (t !== E.MANUAL) {
                        var i = t === E.HOVER ? e.constructor.Event.MOUSEENTER : e.constructor.Event.FOCUSIN;
                        var r = t === E.HOVER ? e.constructor.Event.MOUSELEAVE : e.constructor.Event.FOCUSOUT;
                        n(e.element).on(i, e.config.selector, function(t) {
                            return e._enter(t);
                        }).on(r, e.config.selector, function(t) {
                            return e._leave(t);
                        });
                    }
                    n(e.element).closest(".modal").on("hide.bs.modal", function() {
                        return e.hide();
                    });
                });
                if (this.config.selector) {
                    this.config = n.extend({}, this.config, {
                        trigger: "manual",
                        selector: ""
                    });
                } else {
                    this._fixTitle();
                }
            };
            f.prototype._fixTitle = function e() {
                var n = t(this.element.getAttribute("data-original-title"));
                if (this.element.getAttribute("title") || n !== "string") {
                    this.element.setAttribute("data-original-title", this.element.getAttribute("title") || "");
                    this.element.setAttribute("title", "");
                }
            };
            f.prototype._enter = function t(e, i) {
                var r = this.constructor.DATA_KEY;
                i = i || n(e.currentTarget).data(r);
                if (!i) {
                    i = new this.constructor(e.currentTarget, this._getDelegateConfig());
                    n(e.currentTarget).data(r, i);
                }
                if (e) {
                    i._activeTrigger[e.type === "focusin" ? E.FOCUS : E.HOVER] = true;
                }
                if (n(i.getTipElement()).hasClass(m.SHOW) || i._hoverState === v.SHOW) {
                    i._hoverState = v.SHOW;
                    return;
                }
                clearTimeout(i._timeout);
                i._hoverState = v.SHOW;
                if (!i.config.delay || !i.config.delay.show) {
                    i.show();
                    return;
                }
                i._timeout = setTimeout(function() {
                    if (i._hoverState === v.SHOW) {
                        i.show();
                    }
                }, i.config.delay.show);
            };
            f.prototype._leave = function t(e, i) {
                var r = this.constructor.DATA_KEY;
                i = i || n(e.currentTarget).data(r);
                if (!i) {
                    i = new this.constructor(e.currentTarget, this._getDelegateConfig());
                    n(e.currentTarget).data(r, i);
                }
                if (e) {
                    i._activeTrigger[e.type === "focusout" ? E.FOCUS : E.HOVER] = false;
                }
                if (i._isWithActiveTrigger()) {
                    return;
                }
                clearTimeout(i._timeout);
                i._hoverState = v.OUT;
                if (!i.config.delay || !i.config.delay.hide) {
                    i.hide();
                    return;
                }
                i._timeout = setTimeout(function() {
                    if (i._hoverState === v.OUT) {
                        i.hide();
                    }
                }, i.config.delay.hide);
            };
            f.prototype._isWithActiveTrigger = function t() {
                for (var e in this._activeTrigger) {
                    if (this._activeTrigger[e]) {
                        return true;
                    }
                }
                return false;
            };
            f.prototype._getConfig = function t(e) {
                e = n.extend({}, this.constructor.Default, n(this.element).data(), e);
                if (e.delay && typeof e.delay === "number") {
                    e.delay = {
                        show: e.delay,
                        hide: e.delay
                    };
                }
                o.typeCheckConfig(i, e, this.constructor.DefaultType);
                return e;
            };
            f.prototype._getDelegateConfig = function t() {
                var e = {};
                if (this.config) {
                    for (var n in this.config) {
                        if (this.constructor.Default[n] !== this.config[n]) {
                            e[n] = this.config[n];
                        }
                    }
                }
                return e;
            };
            f._jQueryInterface = function e(i) {
                return this.each(function() {
                    var e = n(this).data(a);
                    var r = (typeof i === "undefined" ? "undefined" : t(i)) === "object" && i;
                    if (!e && /dispose|hide/.test(i)) {
                        return;
                    }
                    if (!e) {
                        e = new f(this, r);
                        n(this).data(a, e);
                    }
                    if (typeof i === "string") {
                        if (e[i] === undefined) {
                            throw new Error('No method named "' + i + '"');
                        }
                        e[i]();
                    }
                });
            };
            e(f, null, [ {
                key: "VERSION",
                get: function t() {
                    return s;
                }
            }, {
                key: "Default",
                get: function t() {
                    return c;
                }
            }, {
                key: "NAME",
                get: function t() {
                    return i;
                }
            }, {
                key: "DATA_KEY",
                get: function t() {
                    return a;
                }
            }, {
                key: "Event",
                get: function t() {
                    return g;
                }
            }, {
                key: "EVENT_KEY",
                get: function t() {
                    return l;
                }
            }, {
                key: "DefaultType",
                get: function t() {
                    return d;
                }
            } ]);
            return f;
        }();
        n.fn[i] = T._jQueryInterface;
        n.fn[i].Constructor = T;
        n.fn[i].noConflict = function() {
            n.fn[i] = f;
            return T._jQueryInterface;
        };
        return T;
    }(jQuery);
    var v = function(o) {
        var s = "popover";
        var a = "4.0.0-alpha.6";
        var l = "bs.popover";
        var f = "." + l;
        var u = o.fn[s];
        var h = o.extend({}, p.Default, {
            placement: "right",
            trigger: "click",
            content: "",
            template: '<div class="popover" role="tooltip">' + '<h3 class="popover-title"></h3>' + '<div class="popover-content"></div></div>'
        });
        var c = o.extend({}, p.DefaultType, {
            content: "(string|element|function)"
        });
        var d = {
            FADE: "fade",
            SHOW: "show"
        };
        var v = {
            TITLE: ".popover-title",
            CONTENT: ".popover-content"
        };
        var g = {
            HIDE: "hide" + f,
            HIDDEN: "hidden" + f,
            SHOW: "show" + f,
            SHOWN: "shown" + f,
            INSERTED: "inserted" + f,
            CLICK: "click" + f,
            FOCUSIN: "focusin" + f,
            FOCUSOUT: "focusout" + f,
            MOUSEENTER: "mouseenter" + f,
            MOUSELEAVE: "mouseleave" + f
        };
        var m = function(u) {
            i(p, u);
            function p() {
                r(this, p);
                return n(this, u.apply(this, arguments));
            }
            p.prototype.isWithContent = function t() {
                return this.getTitle() || this._getContent();
            };
            p.prototype.getTipElement = function t() {
                return this.tip = this.tip || o(this.config.template)[0];
            };
            p.prototype.setContent = function t() {
                var e = o(this.getTipElement());
                this.setElementContent(e.find(v.TITLE), this.getTitle());
                this.setElementContent(e.find(v.CONTENT), this._getContent());
                e.removeClass(d.FADE + " " + d.SHOW);
                this.cleanupTether();
            };
            p.prototype._getContent = function t() {
                return this.element.getAttribute("data-content") || (typeof this.config.content === "function" ? this.config.content.call(this.element) : this.config.content);
            };
            p._jQueryInterface = function e(n) {
                return this.each(function() {
                    var e = o(this).data(l);
                    var i = (typeof n === "undefined" ? "undefined" : t(n)) === "object" ? n : null;
                    if (!e && /destroy|hide/.test(n)) {
                        return;
                    }
                    if (!e) {
                        e = new p(this, i);
                        o(this).data(l, e);
                    }
                    if (typeof n === "string") {
                        if (e[n] === undefined) {
                            throw new Error('No method named "' + n + '"');
                        }
                        e[n]();
                    }
                });
            };
            e(p, null, [ {
                key: "VERSION",
                get: function t() {
                    return a;
                }
            }, {
                key: "Default",
                get: function t() {
                    return h;
                }
            }, {
                key: "NAME",
                get: function t() {
                    return s;
                }
            }, {
                key: "DATA_KEY",
                get: function t() {
                    return l;
                }
            }, {
                key: "Event",
                get: function t() {
                    return g;
                }
            }, {
                key: "EVENT_KEY",
                get: function t() {
                    return f;
                }
            }, {
                key: "DefaultType",
                get: function t() {
                    return c;
                }
            } ]);
            return p;
        }(p);
        o.fn[s] = m._jQueryInterface;
        o.fn[s].Constructor = m;
        o.fn[s].noConflict = function() {
            o.fn[s] = u;
            return m._jQueryInterface;
        };
        return m;
    }(jQuery);
}();

(function(t, e) {
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], function(n) {
            return t["jQuery"] = e(n);
        });
    } else if (typeof exports === "object") {
        module.exports = e(require("jquery"));
    } else {
        t["jQuery"] = e(jQuery);
    }
})(this, function(t) {
    t.easing["jswing"] = t.easing["swing"];
    t.extend(t.easing, {
        def: "easeOutQuad",
        swing: function(e, n, i, r, o) {
            return t.easing[t.easing.def](e, n, i, r, o);
        },
        easeInQuad: function(t, e, n, i, r) {
            return i * (e /= r) * e + n;
        },
        easeOutQuad: function(t, e, n, i, r) {
            return -i * (e /= r) * (e - 2) + n;
        },
        easeInOutQuad: function(t, e, n, i, r) {
            if ((e /= r / 2) < 1) return i / 2 * e * e + n;
            return -i / 2 * (--e * (e - 2) - 1) + n;
        },
        easeInCubic: function(t, e, n, i, r) {
            return i * (e /= r) * e * e + n;
        },
        easeOutCubic: function(t, e, n, i, r) {
            return i * ((e = e / r - 1) * e * e + 1) + n;
        },
        easeInOutCubic: function(t, e, n, i, r) {
            if ((e /= r / 2) < 1) return i / 2 * e * e * e + n;
            return i / 2 * ((e -= 2) * e * e + 2) + n;
        },
        easeInQuart: function(t, e, n, i, r) {
            return i * (e /= r) * e * e * e + n;
        },
        easeOutQuart: function(t, e, n, i, r) {
            return -i * ((e = e / r - 1) * e * e * e - 1) + n;
        },
        easeInOutQuart: function(t, e, n, i, r) {
            if ((e /= r / 2) < 1) return i / 2 * e * e * e * e + n;
            return -i / 2 * ((e -= 2) * e * e * e - 2) + n;
        },
        easeInQuint: function(t, e, n, i, r) {
            return i * (e /= r) * e * e * e * e + n;
        },
        easeOutQuint: function(t, e, n, i, r) {
            return i * ((e = e / r - 1) * e * e * e * e + 1) + n;
        },
        easeInOutQuint: function(t, e, n, i, r) {
            if ((e /= r / 2) < 1) return i / 2 * e * e * e * e * e + n;
            return i / 2 * ((e -= 2) * e * e * e * e + 2) + n;
        },
        easeInSine: function(t, e, n, i, r) {
            return -i * Math.cos(e / r * (Math.PI / 2)) + i + n;
        },
        easeOutSine: function(t, e, n, i, r) {
            return i * Math.sin(e / r * (Math.PI / 2)) + n;
        },
        easeInOutSine: function(t, e, n, i, r) {
            return -i / 2 * (Math.cos(Math.PI * e / r) - 1) + n;
        },
        easeInExpo: function(t, e, n, i, r) {
            return e == 0 ? n : i * Math.pow(2, 10 * (e / r - 1)) + n;
        },
        easeOutExpo: function(t, e, n, i, r) {
            return e == r ? n + i : i * (-Math.pow(2, -10 * e / r) + 1) + n;
        },
        easeInOutExpo: function(t, e, n, i, r) {
            if (e == 0) return n;
            if (e == r) return n + i;
            if ((e /= r / 2) < 1) return i / 2 * Math.pow(2, 10 * (e - 1)) + n;
            return i / 2 * (-Math.pow(2, -10 * --e) + 2) + n;
        },
        easeInCirc: function(t, e, n, i, r) {
            return -i * (Math.sqrt(1 - (e /= r) * e) - 1) + n;
        },
        easeOutCirc: function(t, e, n, i, r) {
            return i * Math.sqrt(1 - (e = e / r - 1) * e) + n;
        },
        easeInOutCirc: function(t, e, n, i, r) {
            if ((e /= r / 2) < 1) return -i / 2 * (Math.sqrt(1 - e * e) - 1) + n;
            return i / 2 * (Math.sqrt(1 - (e -= 2) * e) + 1) + n;
        },
        easeInElastic: function(t, e, n, i, r) {
            var o = 1.70158;
            var s = 0;
            var a = i;
            if (e == 0) return n;
            if ((e /= r) == 1) return n + i;
            if (!s) s = r * .3;
            if (a < Math.abs(i)) {
                a = i;
                var o = s / 4;
            } else var o = s / (2 * Math.PI) * Math.asin(i / a);
            return -(a * Math.pow(2, 10 * (e -= 1)) * Math.sin((e * r - o) * (2 * Math.PI) / s)) + n;
        },
        easeOutElastic: function(t, e, n, i, r) {
            var o = 1.70158;
            var s = 0;
            var a = i;
            if (e == 0) return n;
            if ((e /= r) == 1) return n + i;
            if (!s) s = r * .3;
            if (a < Math.abs(i)) {
                a = i;
                var o = s / 4;
            } else var o = s / (2 * Math.PI) * Math.asin(i / a);
            return a * Math.pow(2, -10 * e) * Math.sin((e * r - o) * (2 * Math.PI) / s) + i + n;
        },
        easeInOutElastic: function(t, e, n, i, r) {
            var o = 1.70158;
            var s = 0;
            var a = i;
            if (e == 0) return n;
            if ((e /= r / 2) == 2) return n + i;
            if (!s) s = r * (.3 * 1.5);
            if (a < Math.abs(i)) {
                a = i;
                var o = s / 4;
            } else var o = s / (2 * Math.PI) * Math.asin(i / a);
            if (e < 1) return -.5 * (a * Math.pow(2, 10 * (e -= 1)) * Math.sin((e * r - o) * (2 * Math.PI) / s)) + n;
            return a * Math.pow(2, -10 * (e -= 1)) * Math.sin((e * r - o) * (2 * Math.PI) / s) * .5 + i + n;
        },
        easeInBack: function(t, e, n, i, r, o) {
            if (o == undefined) o = 1.70158;
            return i * (e /= r) * e * ((o + 1) * e - o) + n;
        },
        easeOutBack: function(t, e, n, i, r, o) {
            if (o == undefined) o = 1.70158;
            return i * ((e = e / r - 1) * e * ((o + 1) * e + o) + 1) + n;
        },
        easeInOutBack: function(t, e, n, i, r, o) {
            if (o == undefined) o = 1.70158;
            if ((e /= r / 2) < 1) return i / 2 * (e * e * (((o *= 1.525) + 1) * e - o)) + n;
            return i / 2 * ((e -= 2) * e * (((o *= 1.525) + 1) * e + o) + 2) + n;
        },
        easeInBounce: function(e, n, i, r, o) {
            return r - t.easing.easeOutBounce(e, o - n, 0, r, o) + i;
        },
        easeOutBounce: function(t, e, n, i, r) {
            if ((e /= r) < 1 / 2.75) {
                return i * (7.5625 * e * e) + n;
            } else if (e < 2 / 2.75) {
                return i * (7.5625 * (e -= 1.5 / 2.75) * e + .75) + n;
            } else if (e < 2.5 / 2.75) {
                return i * (7.5625 * (e -= 2.25 / 2.75) * e + .9375) + n;
            } else {
                return i * (7.5625 * (e -= 2.625 / 2.75) * e + .984375) + n;
            }
        },
        easeInOutBounce: function(e, n, i, r, o) {
            if (n < o / 2) return t.easing.easeInBounce(e, n * 2, 0, r, o) * .5 + i;
            return t.easing.easeOutBounce(e, n * 2 - o, 0, r, o) * .5 + r * .5 + i;
        }
    });
    return t;
});

(function() {
    var t, e, n, i, r, o = function(t, e) {
        return function() {
            return t.apply(e, arguments);
        };
    }, s = [].indexOf || function(t) {
        for (var e = 0, n = this.length; e < n; e++) {
            if (e in this && this[e] === t) return e;
        }
        return -1;
    };
    e = function() {
        function t() {}
        t.prototype.extend = function(t, e) {
            var n, i;
            for (n in e) {
                i = e[n];
                if (t[n] == null) {
                    t[n] = i;
                }
            }
            return t;
        };
        t.prototype.isMobile = function(t) {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(t);
        };
        t.prototype.createEvent = function(t, e, n, i) {
            var r;
            if (e == null) {
                e = false;
            }
            if (n == null) {
                n = false;
            }
            if (i == null) {
                i = null;
            }
            if (document.createEvent != null) {
                r = document.createEvent("CustomEvent");
                r.initCustomEvent(t, e, n, i);
            } else if (document.createEventObject != null) {
                r = document.createEventObject();
                r.eventType = t;
            } else {
                r.eventName = t;
            }
            return r;
        };
        t.prototype.emitEvent = function(t, e) {
            if (t.dispatchEvent != null) {
                return t.dispatchEvent(e);
            } else if (e in (t != null)) {
                return t[e]();
            } else if ("on" + e in (t != null)) {
                return t["on" + e]();
            }
        };
        t.prototype.addEvent = function(t, e, n) {
            if (t.addEventListener != null) {
                return t.addEventListener(e, n, false);
            } else if (t.attachEvent != null) {
                return t.attachEvent("on" + e, n);
            } else {
                return t[e] = n;
            }
        };
        t.prototype.removeEvent = function(t, e, n) {
            if (t.removeEventListener != null) {
                return t.removeEventListener(e, n, false);
            } else if (t.detachEvent != null) {
                return t.detachEvent("on" + e, n);
            } else {
                return delete t[e];
            }
        };
        t.prototype.innerHeight = function() {
            if ("innerHeight" in window) {
                return window.innerHeight;
            } else {
                return document.documentElement.clientHeight;
            }
        };
        return t;
    }();
    n = this.WeakMap || this.MozWeakMap || (n = function() {
        function t() {
            this.keys = [];
            this.values = [];
        }
        t.prototype.get = function(t) {
            var e, n, i, r, o;
            o = this.keys;
            for (e = i = 0, r = o.length; i < r; e = ++i) {
                n = o[e];
                if (n === t) {
                    return this.values[e];
                }
            }
        };
        t.prototype.set = function(t, e) {
            var n, i, r, o, s;
            s = this.keys;
            for (n = r = 0, o = s.length; r < o; n = ++r) {
                i = s[n];
                if (i === t) {
                    this.values[n] = e;
                    return;
                }
            }
            this.keys.push(t);
            return this.values.push(e);
        };
        return t;
    }());
    t = this.MutationObserver || this.WebkitMutationObserver || this.MozMutationObserver || (t = function() {
        function t() {
            if (typeof console !== "undefined" && console !== null) {
                console.warn("MutationObserver is not supported by your browser.");
            }
            if (typeof console !== "undefined" && console !== null) {
                console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.");
            }
        }
        t.notSupported = true;
        t.prototype.observe = function() {};
        return t;
    }());
    i = this.getComputedStyle || function(t, e) {
        this.getPropertyValue = function(e) {
            var n;
            if (e === "float") {
                e = "styleFloat";
            }
            if (r.test(e)) {
                e.replace(r, function(t, e) {
                    return e.toUpperCase();
                });
            }
            return ((n = t.currentStyle) != null ? n[e] : void 0) || null;
        };
        return this;
    };
    r = /(\-([a-z]){1})/g;
    this.WOW = function() {
        r.prototype.defaults = {
            boxClass: "wow",
            animateClass: "animated",
            offset: 0,
            mobile: true,
            live: true,
            callback: null
        };
        function r(t) {
            if (t == null) {
                t = {};
            }
            this.scrollCallback = o(this.scrollCallback, this);
            this.scrollHandler = o(this.scrollHandler, this);
            this.resetAnimation = o(this.resetAnimation, this);
            this.start = o(this.start, this);
            this.scrolled = true;
            this.config = this.util().extend(t, this.defaults);
            this.animationNameCache = new n();
            this.wowEvent = this.util().createEvent(this.config.boxClass);
        }
        r.prototype.init = function() {
            var t;
            this.element = window.document.documentElement;
            if ((t = document.readyState) === "interactive" || t === "complete") {
                this.start();
            } else {
                this.util().addEvent(document, "DOMContentLoaded", this.start);
            }
            return this.finished = [];
        };
        r.prototype.start = function() {
            var e, n, i, r;
            this.stopped = false;
            this.boxes = function() {
                var t, n, i, r;
                i = this.element.querySelectorAll("." + this.config.boxClass);
                r = [];
                for (t = 0, n = i.length; t < n; t++) {
                    e = i[t];
                    r.push(e);
                }
                return r;
            }.call(this);
            this.all = function() {
                var t, n, i, r;
                i = this.boxes;
                r = [];
                for (t = 0, n = i.length; t < n; t++) {
                    e = i[t];
                    r.push(e);
                }
                return r;
            }.call(this);
            if (this.boxes.length) {
                if (this.disabled()) {
                    this.resetStyle();
                } else {
                    r = this.boxes;
                    for (n = 0, i = r.length; n < i; n++) {
                        e = r[n];
                        this.applyStyle(e, true);
                    }
                }
            }
            if (!this.disabled()) {
                this.util().addEvent(window, "scroll", this.scrollHandler);
                this.util().addEvent(window, "resize", this.scrollHandler);
                this.interval = setInterval(this.scrollCallback, 50);
            }
            if (this.config.live) {
                return new t(function(t) {
                    return function(e) {
                        var n, i, r, o, s;
                        s = [];
                        for (n = 0, i = e.length; n < i; n++) {
                            o = e[n];
                            s.push(function() {
                                var t, e, n, i;
                                n = o.addedNodes || [];
                                i = [];
                                for (t = 0, e = n.length; t < e; t++) {
                                    r = n[t];
                                    i.push(this.doSync(r));
                                }
                                return i;
                            }.call(t));
                        }
                        return s;
                    };
                }(this)).observe(document.body, {
                    childList: true,
                    subtree: true
                });
            }
        };
        r.prototype.stop = function() {
            this.stopped = true;
            this.util().removeEvent(window, "scroll", this.scrollHandler);
            this.util().removeEvent(window, "resize", this.scrollHandler);
            if (this.interval != null) {
                return clearInterval(this.interval);
            }
        };
        r.prototype.sync = function(e) {
            if (t.notSupported) {
                return this.doSync(this.element);
            }
        };
        r.prototype.doSync = function(t) {
            var e, n, i, r, o;
            if (t == null) {
                t = this.element;
            }
            if (t.nodeType !== 1) {
                return;
            }
            t = t.parentNode || t;
            r = t.querySelectorAll("." + this.config.boxClass);
            o = [];
            for (n = 0, i = r.length; n < i; n++) {
                e = r[n];
                if (s.call(this.all, e) < 0) {
                    this.boxes.push(e);
                    this.all.push(e);
                    if (this.stopped || this.disabled()) {
                        this.resetStyle();
                    } else {
                        this.applyStyle(e, true);
                    }
                    o.push(this.scrolled = true);
                } else {
                    o.push(void 0);
                }
            }
            return o;
        };
        r.prototype.show = function(t) {
            this.applyStyle(t);
            t.className = t.className + " " + this.config.animateClass;
            if (this.config.callback != null) {
                this.config.callback(t);
            }
            this.util().emitEvent(t, this.wowEvent);
            this.util().addEvent(t, "animationend", this.resetAnimation);
            this.util().addEvent(t, "oanimationend", this.resetAnimation);
            this.util().addEvent(t, "webkitAnimationEnd", this.resetAnimation);
            this.util().addEvent(t, "MSAnimationEnd", this.resetAnimation);
            return t;
        };
        r.prototype.applyStyle = function(t, e) {
            var n, i, r;
            i = t.getAttribute("data-wow-duration");
            n = t.getAttribute("data-wow-delay");
            r = t.getAttribute("data-wow-iteration");
            return this.animate(function(o) {
                return function() {
                    return o.customStyle(t, e, i, n, r);
                };
            }(this));
        };
        r.prototype.animate = function() {
            if ("requestAnimationFrame" in window) {
                return function(t) {
                    return window.requestAnimationFrame(t);
                };
            } else {
                return function(t) {
                    return t();
                };
            }
        }();
        r.prototype.resetStyle = function() {
            var t, e, n, i, r;
            i = this.boxes;
            r = [];
            for (e = 0, n = i.length; e < n; e++) {
                t = i[e];
                r.push(t.style.visibility = "visible");
            }
            return r;
        };
        r.prototype.resetAnimation = function(t) {
            var e;
            if (t.type.toLowerCase().indexOf("animationend") >= 0) {
                e = t.target || t.srcElement;
                return e.className = e.className.replace(this.config.animateClass, "").trim();
            }
        };
        r.prototype.customStyle = function(t, e, n, i, r) {
            if (e) {
                this.cacheAnimationName(t);
            }
            t.style.visibility = e ? "hidden" : "visible";
            if (n) {
                this.vendorSet(t.style, {
                    animationDuration: n
                });
            }
            if (i) {
                this.vendorSet(t.style, {
                    animationDelay: i
                });
            }
            if (r) {
                this.vendorSet(t.style, {
                    animationIterationCount: r
                });
            }
            this.vendorSet(t.style, {
                animationName: e ? "none" : this.cachedAnimationName(t)
            });
            return t;
        };
        r.prototype.vendors = [ "moz", "webkit" ];
        r.prototype.vendorSet = function(t, e) {
            var n, i, r, o;
            i = [];
            for (n in e) {
                r = e[n];
                t["" + n] = r;
                i.push(function() {
                    var e, i, s, a;
                    s = this.vendors;
                    a = [];
                    for (e = 0, i = s.length; e < i; e++) {
                        o = s[e];
                        a.push(t["" + o + n.charAt(0).toUpperCase() + n.substr(1)] = r);
                    }
                    return a;
                }.call(this));
            }
            return i;
        };
        r.prototype.vendorCSS = function(t, e) {
            var n, r, o, s, a, l;
            a = i(t);
            s = a.getPropertyCSSValue(e);
            o = this.vendors;
            for (n = 0, r = o.length; n < r; n++) {
                l = o[n];
                s = s || a.getPropertyCSSValue("-" + l + "-" + e);
            }
            return s;
        };
        r.prototype.animationName = function(t) {
            var e;
            try {
                e = this.vendorCSS(t, "animation-name").cssText;
            } catch (n) {
                e = i(t).getPropertyValue("animation-name");
            }
            if (e === "none") {
                return "";
            } else {
                return e;
            }
        };
        r.prototype.cacheAnimationName = function(t) {
            return this.animationNameCache.set(t, this.animationName(t));
        };
        r.prototype.cachedAnimationName = function(t) {
            return this.animationNameCache.get(t);
        };
        r.prototype.scrollHandler = function() {
            return this.scrolled = true;
        };
        r.prototype.scrollCallback = function() {
            var t;
            if (this.scrolled) {
                this.scrolled = false;
                this.boxes = function() {
                    var e, n, i, r;
                    i = this.boxes;
                    r = [];
                    for (e = 0, n = i.length; e < n; e++) {
                        t = i[e];
                        if (!t) {
                            continue;
                        }
                        if (this.isVisible(t)) {
                            this.show(t);
                            continue;
                        }
                        r.push(t);
                    }
                    return r;
                }.call(this);
                if (!(this.boxes.length || this.config.live)) {
                    return this.stop();
                }
            }
        };
        r.prototype.offsetTop = function(t) {
            var e;
            while (t.offsetTop === void 0) {
                t = t.parentNode;
            }
            e = t.offsetTop;
            while (t = t.offsetParent) {
                e += t.offsetTop;
            }
            return e;
        };
        r.prototype.isVisible = function(t) {
            var e, n, i, r, o;
            n = t.getAttribute("data-wow-offset") || this.config.offset;
            o = window.pageYOffset;
            r = o + Math.min(this.element.clientHeight, this.util().innerHeight()) - n;
            i = this.offsetTop(t);
            e = i + t.clientHeight;
            return i <= r && e >= o;
        };
        r.prototype.util = function() {
            return this._util != null ? this._util : this._util = new e();
        };
        r.prototype.disabled = function() {
            return !this.config.mobile && this.util().isMobile(navigator.userAgent);
        };
        return r;
    }();
}).call(this);
//# sourceMappingURL=scripts.min.js.map